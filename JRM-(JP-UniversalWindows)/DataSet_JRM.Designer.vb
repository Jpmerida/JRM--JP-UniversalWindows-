'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetTransaction"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetTransaction
    Inherits Global.System.Data.DataSet
    
    Private tabletable_transactions As table_transactionsDataTable
    
    Private tabletblusers As tblusersDataTable
    
    Private tabletblpayment As tblpaymentDataTable
    
    Private tabletable_transactiondetailsvenue As table_transactiondetailsvenueDataTable
    
    Private tabletable_transactiondetailsitem As table_transactiondetailsitemDataTable
    
    Private tabletable_transactiondetails As table_transactiondetailsDataTable
    
    Private tabletblguestdetails As tblguestdetailsDataTable
    
    Private tabletblguests As tblguestsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("table_transactions")) Is Nothing) Then
                MyBase.Tables.Add(New table_transactionsDataTable(ds.Tables("table_transactions")))
            End If
            If (Not (ds.Tables("tblusers")) Is Nothing) Then
                MyBase.Tables.Add(New tblusersDataTable(ds.Tables("tblusers")))
            End If
            If (Not (ds.Tables("tblpayment")) Is Nothing) Then
                MyBase.Tables.Add(New tblpaymentDataTable(ds.Tables("tblpayment")))
            End If
            If (Not (ds.Tables("table_transactiondetailsvenue")) Is Nothing) Then
                MyBase.Tables.Add(New table_transactiondetailsvenueDataTable(ds.Tables("table_transactiondetailsvenue")))
            End If
            If (Not (ds.Tables("table_transactiondetailsitem")) Is Nothing) Then
                MyBase.Tables.Add(New table_transactiondetailsitemDataTable(ds.Tables("table_transactiondetailsitem")))
            End If
            If (Not (ds.Tables("table_transactiondetails")) Is Nothing) Then
                MyBase.Tables.Add(New table_transactiondetailsDataTable(ds.Tables("table_transactiondetails")))
            End If
            If (Not (ds.Tables("tblguestdetails")) Is Nothing) Then
                MyBase.Tables.Add(New tblguestdetailsDataTable(ds.Tables("tblguestdetails")))
            End If
            If (Not (ds.Tables("tblguests")) Is Nothing) Then
                MyBase.Tables.Add(New tblguestsDataTable(ds.Tables("tblguests")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property table_transactions() As table_transactionsDataTable
        Get
            Return Me.tabletable_transactions
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblusers() As tblusersDataTable
        Get
            Return Me.tabletblusers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblpayment() As tblpaymentDataTable
        Get
            Return Me.tabletblpayment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property table_transactiondetailsvenue() As table_transactiondetailsvenueDataTable
        Get
            Return Me.tabletable_transactiondetailsvenue
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property table_transactiondetailsitem() As table_transactiondetailsitemDataTable
        Get
            Return Me.tabletable_transactiondetailsitem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property table_transactiondetails() As table_transactiondetailsDataTable
        Get
            Return Me.tabletable_transactiondetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblguestdetails() As tblguestdetailsDataTable
        Get
            Return Me.tabletblguestdetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblguests() As tblguestsDataTable
        Get
            Return Me.tabletblguests
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetTransaction = CType(MyBase.Clone,DataSetTransaction)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("table_transactions")) Is Nothing) Then
                MyBase.Tables.Add(New table_transactionsDataTable(ds.Tables("table_transactions")))
            End If
            If (Not (ds.Tables("tblusers")) Is Nothing) Then
                MyBase.Tables.Add(New tblusersDataTable(ds.Tables("tblusers")))
            End If
            If (Not (ds.Tables("tblpayment")) Is Nothing) Then
                MyBase.Tables.Add(New tblpaymentDataTable(ds.Tables("tblpayment")))
            End If
            If (Not (ds.Tables("table_transactiondetailsvenue")) Is Nothing) Then
                MyBase.Tables.Add(New table_transactiondetailsvenueDataTable(ds.Tables("table_transactiondetailsvenue")))
            End If
            If (Not (ds.Tables("table_transactiondetailsitem")) Is Nothing) Then
                MyBase.Tables.Add(New table_transactiondetailsitemDataTable(ds.Tables("table_transactiondetailsitem")))
            End If
            If (Not (ds.Tables("table_transactiondetails")) Is Nothing) Then
                MyBase.Tables.Add(New table_transactiondetailsDataTable(ds.Tables("table_transactiondetails")))
            End If
            If (Not (ds.Tables("tblguestdetails")) Is Nothing) Then
                MyBase.Tables.Add(New tblguestdetailsDataTable(ds.Tables("tblguestdetails")))
            End If
            If (Not (ds.Tables("tblguests")) Is Nothing) Then
                MyBase.Tables.Add(New tblguestsDataTable(ds.Tables("tblguests")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletable_transactions = CType(MyBase.Tables("table_transactions"),table_transactionsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletable_transactions) Is Nothing) Then
                Me.tabletable_transactions.InitVars
            End If
        End If
        Me.tabletblusers = CType(MyBase.Tables("tblusers"),tblusersDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblusers) Is Nothing) Then
                Me.tabletblusers.InitVars
            End If
        End If
        Me.tabletblpayment = CType(MyBase.Tables("tblpayment"),tblpaymentDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblpayment) Is Nothing) Then
                Me.tabletblpayment.InitVars
            End If
        End If
        Me.tabletable_transactiondetailsvenue = CType(MyBase.Tables("table_transactiondetailsvenue"),table_transactiondetailsvenueDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletable_transactiondetailsvenue) Is Nothing) Then
                Me.tabletable_transactiondetailsvenue.InitVars
            End If
        End If
        Me.tabletable_transactiondetailsitem = CType(MyBase.Tables("table_transactiondetailsitem"),table_transactiondetailsitemDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletable_transactiondetailsitem) Is Nothing) Then
                Me.tabletable_transactiondetailsitem.InitVars
            End If
        End If
        Me.tabletable_transactiondetails = CType(MyBase.Tables("table_transactiondetails"),table_transactiondetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletable_transactiondetails) Is Nothing) Then
                Me.tabletable_transactiondetails.InitVars
            End If
        End If
        Me.tabletblguestdetails = CType(MyBase.Tables("tblguestdetails"),tblguestdetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblguestdetails) Is Nothing) Then
                Me.tabletblguestdetails.InitVars
            End If
        End If
        Me.tabletblguests = CType(MyBase.Tables("tblguests"),tblguestsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblguests) Is Nothing) Then
                Me.tabletblguests.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetTransaction"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetTransaction.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletable_transactions = New table_transactionsDataTable()
        MyBase.Tables.Add(Me.tabletable_transactions)
        Me.tabletblusers = New tblusersDataTable()
        MyBase.Tables.Add(Me.tabletblusers)
        Me.tabletblpayment = New tblpaymentDataTable()
        MyBase.Tables.Add(Me.tabletblpayment)
        Me.tabletable_transactiondetailsvenue = New table_transactiondetailsvenueDataTable()
        MyBase.Tables.Add(Me.tabletable_transactiondetailsvenue)
        Me.tabletable_transactiondetailsitem = New table_transactiondetailsitemDataTable()
        MyBase.Tables.Add(Me.tabletable_transactiondetailsitem)
        Me.tabletable_transactiondetails = New table_transactiondetailsDataTable()
        MyBase.Tables.Add(Me.tabletable_transactiondetails)
        Me.tabletblguestdetails = New tblguestdetailsDataTable()
        MyBase.Tables.Add(Me.tabletblguestdetails)
        Me.tabletblguests = New tblguestsDataTable()
        MyBase.Tables.Add(Me.tabletblguests)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetable_transactions() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetblusers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetblpayment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetable_transactiondetailsvenue() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetable_transactiondetailsitem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetable_transactiondetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetblguestdetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetblguests() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetTransaction = New DataSetTransaction()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub table_transactionsRowChangeEventHandler(ByVal sender As Object, ByVal e As table_transactionsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub tblusersRowChangeEventHandler(ByVal sender As Object, ByVal e As tblusersRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub tblpaymentRowChangeEventHandler(ByVal sender As Object, ByVal e As tblpaymentRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub table_transactiondetailsvenueRowChangeEventHandler(ByVal sender As Object, ByVal e As table_transactiondetailsvenueRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub table_transactiondetailsitemRowChangeEventHandler(ByVal sender As Object, ByVal e As table_transactiondetailsitemRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub table_transactiondetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As table_transactiondetailsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub tblguestdetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblguestdetailsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub tblguestsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblguestsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class table_transactionsDataTable
        Inherits Global.System.Data.TypedTableBase(Of table_transactionsRow)
        
        Private columnT_id As Global.System.Data.DataColumn
        
        Private columnU_id As Global.System.Data.DataColumn
        
        Private columnG_id As Global.System.Data.DataColumn
        
        Private columnTransDate As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnCheckIn As Global.System.Data.DataColumn
        
        Private columnCheckout As Global.System.Data.DataColumn
        
        Private columnDiscount As Global.System.Data.DataColumn
        
        Private columnAdvance As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "table_transactions"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property T_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property U_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property G_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnG_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TransDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CheckInColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckIn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CheckoutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckout
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DiscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AdvanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdvance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As table_transactionsRow
            Get
                Return CType(Me.Rows(index),table_transactionsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactionsRowChanging As table_transactionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactionsRowChanged As table_transactionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactionsRowDeleting As table_transactionsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactionsRowDeleted As table_transactionsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub Addtable_transactionsRow(ByVal row As table_transactionsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function Addtable_transactionsRow(ByVal U_id As Integer, ByVal G_id As Integer, ByVal TransDate As Date, ByVal Status As String, ByVal CheckIn As Date, ByVal Checkout As Date, ByVal Discount As Double, ByVal Advance As Double, ByVal Total As Double) As table_transactionsRow
            Dim rowtable_transactionsRow As table_transactionsRow = CType(Me.NewRow,table_transactionsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, U_id, G_id, TransDate, Status, CheckIn, Checkout, Discount, Advance, Total}
            rowtable_transactionsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtable_transactionsRow)
            Return rowtable_transactionsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByT_id(ByVal T_id As Integer) As table_transactionsRow
            Return CType(Me.Rows.Find(New Object() {T_id}),table_transactionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As table_transactionsDataTable = CType(MyBase.Clone,table_transactionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New table_transactionsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnT_id = MyBase.Columns("T_id")
            Me.columnU_id = MyBase.Columns("U_id")
            Me.columnG_id = MyBase.Columns("G_id")
            Me.columnTransDate = MyBase.Columns("TransDate")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnCheckIn = MyBase.Columns("CheckIn")
            Me.columnCheckout = MyBase.Columns("Checkout")
            Me.columnDiscount = MyBase.Columns("Discount")
            Me.columnAdvance = MyBase.Columns("Advance")
            Me.columnTotal = MyBase.Columns("Total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnT_id = New Global.System.Data.DataColumn("T_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_id)
            Me.columnU_id = New Global.System.Data.DataColumn("U_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_id)
            Me.columnG_id = New Global.System.Data.DataColumn("G_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnG_id)
            Me.columnTransDate = New Global.System.Data.DataColumn("TransDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransDate)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnCheckIn = New Global.System.Data.DataColumn("CheckIn", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckIn)
            Me.columnCheckout = New Global.System.Data.DataColumn("Checkout", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckout)
            Me.columnDiscount = New Global.System.Data.DataColumn("Discount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscount)
            Me.columnAdvance = New Global.System.Data.DataColumn("Advance", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdvance)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnT_id}, true))
            Me.columnT_id.AutoIncrement = true
            Me.columnT_id.AutoIncrementSeed = -1
            Me.columnT_id.AutoIncrementStep = -1
            Me.columnT_id.AllowDBNull = false
            Me.columnT_id.Unique = true
            Me.columnU_id.AllowDBNull = false
            Me.columnG_id.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Newtable_transactionsRow() As table_transactionsRow
            Return CType(Me.NewRow,table_transactionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New table_transactionsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(table_transactionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.table_transactionsRowChangedEvent) Is Nothing) Then
                RaiseEvent table_transactionsRowChanged(Me, New table_transactionsRowChangeEvent(CType(e.Row,table_transactionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.table_transactionsRowChangingEvent) Is Nothing) Then
                RaiseEvent table_transactionsRowChanging(Me, New table_transactionsRowChangeEvent(CType(e.Row,table_transactionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.table_transactionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent table_transactionsRowDeleted(Me, New table_transactionsRowChangeEvent(CType(e.Row,table_transactionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.table_transactionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent table_transactionsRowDeleting(Me, New table_transactionsRowChangeEvent(CType(e.Row,table_transactionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Removetable_transactionsRow(ByVal row As table_transactionsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetTransaction = New DataSetTransaction()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "table_transactionsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblusersDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblusersRow)
        
        Private columnUserID As Global.System.Data.DataColumn
        
        Private columnFname As Global.System.Data.DataColumn
        
        Private columnMname As Global.System.Data.DataColumn
        
        Private columnLname As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnContactNo As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnBirthdate As Global.System.Data.DataColumn
        
        Private columnUserCreated As Global.System.Data.DataColumn
        
        Private columnUsertype As Global.System.Data.DataColumn
        
        Private columnUsername As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblusers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContactNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BirthdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UserCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UsertypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsertype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UsernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblusersRow
            Get
                Return CType(Me.Rows(index),tblusersRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblusersRowChanging As tblusersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblusersRowChanged As tblusersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblusersRowDeleting As tblusersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblusersRowDeleted As tblusersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddtblusersRow(ByVal row As tblusersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddtblusersRow(ByVal Fname As String, ByVal Mname As String, ByVal Lname As String, ByVal Gender As String, ByVal Email As String, ByVal ContactNo As String, ByVal Address As String, ByVal Birthdate As Date, ByVal UserCreated As Date, ByVal Usertype As String, ByVal Username As String, ByVal Password As String) As tblusersRow
            Dim rowtblusersRow As tblusersRow = CType(Me.NewRow,tblusersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Fname, Mname, Lname, Gender, Email, ContactNo, Address, Birthdate, UserCreated, Usertype, Username, Password}
            rowtblusersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblusersRow)
            Return rowtblusersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUserID(ByVal UserID As Integer) As tblusersRow
            Return CType(Me.Rows.Find(New Object() {UserID}),tblusersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblusersDataTable = CType(MyBase.Clone,tblusersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblusersDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnFname = MyBase.Columns("Fname")
            Me.columnMname = MyBase.Columns("Mname")
            Me.columnLname = MyBase.Columns("Lname")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnContactNo = MyBase.Columns("ContactNo")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnBirthdate = MyBase.Columns("Birthdate")
            Me.columnUserCreated = MyBase.Columns("UserCreated")
            Me.columnUsertype = MyBase.Columns("Usertype")
            Me.columnUsername = MyBase.Columns("Username")
            Me.columnPassword = MyBase.Columns("Password")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnFname = New Global.System.Data.DataColumn("Fname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFname)
            Me.columnMname = New Global.System.Data.DataColumn("Mname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMname)
            Me.columnLname = New Global.System.Data.DataColumn("Lname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLname)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnContactNo = New Global.System.Data.DataColumn("ContactNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactNo)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnBirthdate = New Global.System.Data.DataColumn("Birthdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthdate)
            Me.columnUserCreated = New Global.System.Data.DataColumn("UserCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserCreated)
            Me.columnUsertype = New Global.System.Data.DataColumn("Usertype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsertype)
            Me.columnUsername = New Global.System.Data.DataColumn("Username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsername)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUserID}, true))
            Me.columnUserID.AutoIncrement = true
            Me.columnUserID.AutoIncrementSeed = -1
            Me.columnUserID.AutoIncrementStep = -1
            Me.columnUserID.AllowDBNull = false
            Me.columnUserID.Unique = true
            Me.columnFname.AllowDBNull = false
            Me.columnLname.AllowDBNull = false
            Me.columnBirthdate.AllowDBNull = false
            Me.columnUserCreated.AllowDBNull = false
            Me.columnUsertype.AllowDBNull = false
            Me.columnUsername.AllowDBNull = false
            Me.columnPassword.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewtblusersRow() As tblusersRow
            Return CType(Me.NewRow,tblusersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblusersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblusersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblusersRowChangedEvent) Is Nothing) Then
                RaiseEvent tblusersRowChanged(Me, New tblusersRowChangeEvent(CType(e.Row,tblusersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblusersRowChangingEvent) Is Nothing) Then
                RaiseEvent tblusersRowChanging(Me, New tblusersRowChangeEvent(CType(e.Row,tblusersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblusersRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblusersRowDeleted(Me, New tblusersRowChangeEvent(CType(e.Row,tblusersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblusersRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblusersRowDeleting(Me, New tblusersRowChangeEvent(CType(e.Row,tblusersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovetblusersRow(ByVal row As tblusersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetTransaction = New DataSetTransaction()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblusersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblpaymentDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblpaymentRow)
        
        Private columnPaymentID As Global.System.Data.DataColumn
        
        Private columnGuestID As Global.System.Data.DataColumn
        
        Private columnT_ID As Global.System.Data.DataColumn
        
        Private columnReservationID As Global.System.Data.DataColumn
        
        Private columnAmountPaid As Global.System.Data.DataColumn
        
        Private columnChange As Global.System.Data.DataColumn
        
        Private columnTotalChange As Global.System.Data.DataColumn
        
        Private columnDatePayed As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblpayment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PaymentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GuestIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuestID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property T_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReservationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReservationID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AmountPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmountPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TotalChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DatePayedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatePayed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblpaymentRow
            Get
                Return CType(Me.Rows(index),tblpaymentRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblpaymentRowChanging As tblpaymentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblpaymentRowChanged As tblpaymentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblpaymentRowDeleting As tblpaymentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblpaymentRowDeleted As tblpaymentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddtblpaymentRow(ByVal row As tblpaymentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddtblpaymentRow(ByVal GuestID As Integer, ByVal T_ID As Integer, ByVal ReservationID As Integer, ByVal AmountPaid As Double, ByVal Change As Double, ByVal TotalChange As Double, ByVal DatePayed As Date) As tblpaymentRow
            Dim rowtblpaymentRow As tblpaymentRow = CType(Me.NewRow,tblpaymentRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, GuestID, T_ID, ReservationID, AmountPaid, Change, TotalChange, DatePayed}
            rowtblpaymentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblpaymentRow)
            Return rowtblpaymentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByPaymentIDGuestIDT_ID(ByVal PaymentID As Integer, ByVal GuestID As Integer, ByVal T_ID As Integer) As tblpaymentRow
            Return CType(Me.Rows.Find(New Object() {PaymentID, GuestID, T_ID}),tblpaymentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblpaymentDataTable = CType(MyBase.Clone,tblpaymentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblpaymentDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPaymentID = MyBase.Columns("PaymentID")
            Me.columnGuestID = MyBase.Columns("GuestID")
            Me.columnT_ID = MyBase.Columns("T_ID")
            Me.columnReservationID = MyBase.Columns("ReservationID")
            Me.columnAmountPaid = MyBase.Columns("AmountPaid")
            Me.columnChange = MyBase.Columns("Change")
            Me.columnTotalChange = MyBase.Columns("TotalChange")
            Me.columnDatePayed = MyBase.Columns("DatePayed")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPaymentID = New Global.System.Data.DataColumn("PaymentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentID)
            Me.columnGuestID = New Global.System.Data.DataColumn("GuestID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuestID)
            Me.columnT_ID = New Global.System.Data.DataColumn("T_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_ID)
            Me.columnReservationID = New Global.System.Data.DataColumn("ReservationID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReservationID)
            Me.columnAmountPaid = New Global.System.Data.DataColumn("AmountPaid", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmountPaid)
            Me.columnChange = New Global.System.Data.DataColumn("Change", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChange)
            Me.columnTotalChange = New Global.System.Data.DataColumn("TotalChange", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalChange)
            Me.columnDatePayed = New Global.System.Data.DataColumn("DatePayed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatePayed)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPaymentID, Me.columnGuestID, Me.columnT_ID}, true))
            Me.columnPaymentID.AutoIncrement = true
            Me.columnPaymentID.AutoIncrementSeed = -1
            Me.columnPaymentID.AutoIncrementStep = -1
            Me.columnPaymentID.AllowDBNull = false
            Me.columnGuestID.AllowDBNull = false
            Me.columnT_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewtblpaymentRow() As tblpaymentRow
            Return CType(Me.NewRow,tblpaymentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblpaymentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblpaymentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblpaymentRowChangedEvent) Is Nothing) Then
                RaiseEvent tblpaymentRowChanged(Me, New tblpaymentRowChangeEvent(CType(e.Row,tblpaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblpaymentRowChangingEvent) Is Nothing) Then
                RaiseEvent tblpaymentRowChanging(Me, New tblpaymentRowChangeEvent(CType(e.Row,tblpaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblpaymentRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblpaymentRowDeleted(Me, New tblpaymentRowChangeEvent(CType(e.Row,tblpaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblpaymentRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblpaymentRowDeleting(Me, New tblpaymentRowChangeEvent(CType(e.Row,tblpaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovetblpaymentRow(ByVal row As tblpaymentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetTransaction = New DataSetTransaction()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblpaymentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class table_transactiondetailsvenueDataTable
        Inherits Global.System.Data.TypedTableBase(Of table_transactiondetailsvenueRow)
        
        Private columnTDV_id As Global.System.Data.DataColumn
        
        Private columnT_id As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnItem_Price As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnSubtotal As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "table_transactiondetailsvenue"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TDV_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDV_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property T_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Item_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As table_transactiondetailsvenueRow
            Get
                Return CType(Me.Rows(index),table_transactiondetailsvenueRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsvenueRowChanging As table_transactiondetailsvenueRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsvenueRowChanged As table_transactiondetailsvenueRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsvenueRowDeleting As table_transactiondetailsvenueRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsvenueRowDeleted As table_transactiondetailsvenueRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub Addtable_transactiondetailsvenueRow(ByVal row As table_transactiondetailsvenueRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function Addtable_transactiondetailsvenueRow(ByVal T_id As Integer, ByVal Item_Name As String, ByVal Item_Price As Double, ByVal Quantity As Double, ByVal Subtotal As Double, ByVal Item_ID As Integer, ByVal Type As String) As table_transactiondetailsvenueRow
            Dim rowtable_transactiondetailsvenueRow As table_transactiondetailsvenueRow = CType(Me.NewRow,table_transactiondetailsvenueRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, T_id, Item_Name, Item_Price, Quantity, Subtotal, Item_ID, Type}
            rowtable_transactiondetailsvenueRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtable_transactiondetailsvenueRow)
            Return rowtable_transactiondetailsvenueRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByTDV_id(ByVal TDV_id As Integer) As table_transactiondetailsvenueRow
            Return CType(Me.Rows.Find(New Object() {TDV_id}),table_transactiondetailsvenueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As table_transactiondetailsvenueDataTable = CType(MyBase.Clone,table_transactiondetailsvenueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New table_transactiondetailsvenueDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnTDV_id = MyBase.Columns("TDV_id")
            Me.columnT_id = MyBase.Columns("T_id")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnItem_Price = MyBase.Columns("Item_Price")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnSubtotal = MyBase.Columns("Subtotal")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnTDV_id = New Global.System.Data.DataColumn("TDV_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDV_id)
            Me.columnT_id = New Global.System.Data.DataColumn("T_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_id)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnItem_Price = New Global.System.Data.DataColumn("Item_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Price)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnSubtotal = New Global.System.Data.DataColumn("Subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotal)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTDV_id}, true))
            Me.columnTDV_id.AutoIncrement = true
            Me.columnTDV_id.AutoIncrementSeed = -1
            Me.columnTDV_id.AutoIncrementStep = -1
            Me.columnTDV_id.AllowDBNull = false
            Me.columnTDV_id.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Newtable_transactiondetailsvenueRow() As table_transactiondetailsvenueRow
            Return CType(Me.NewRow,table_transactiondetailsvenueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New table_transactiondetailsvenueRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(table_transactiondetailsvenueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.table_transactiondetailsvenueRowChangedEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsvenueRowChanged(Me, New table_transactiondetailsvenueRowChangeEvent(CType(e.Row,table_transactiondetailsvenueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.table_transactiondetailsvenueRowChangingEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsvenueRowChanging(Me, New table_transactiondetailsvenueRowChangeEvent(CType(e.Row,table_transactiondetailsvenueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.table_transactiondetailsvenueRowDeletedEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsvenueRowDeleted(Me, New table_transactiondetailsvenueRowChangeEvent(CType(e.Row,table_transactiondetailsvenueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.table_transactiondetailsvenueRowDeletingEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsvenueRowDeleting(Me, New table_transactiondetailsvenueRowChangeEvent(CType(e.Row,table_transactiondetailsvenueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Removetable_transactiondetailsvenueRow(ByVal row As table_transactiondetailsvenueRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetTransaction = New DataSetTransaction()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "table_transactiondetailsvenueDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class table_transactiondetailsitemDataTable
        Inherits Global.System.Data.TypedTableBase(Of table_transactiondetailsitemRow)
        
        Private columnTDI_id As Global.System.Data.DataColumn
        
        Private columnT_id As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnItem_Price As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnSubtotal As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "table_transactiondetailsitem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TDI_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDI_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property T_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Item_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As table_transactiondetailsitemRow
            Get
                Return CType(Me.Rows(index),table_transactiondetailsitemRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsitemRowChanging As table_transactiondetailsitemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsitemRowChanged As table_transactiondetailsitemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsitemRowDeleting As table_transactiondetailsitemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsitemRowDeleted As table_transactiondetailsitemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub Addtable_transactiondetailsitemRow(ByVal row As table_transactiondetailsitemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function Addtable_transactiondetailsitemRow(ByVal T_id As Integer, ByVal Item_Name As String, ByVal Item_Price As Double, ByVal Quantity As Double, ByVal Subtotal As Double, ByVal Item_ID As Integer, ByVal Type As String) As table_transactiondetailsitemRow
            Dim rowtable_transactiondetailsitemRow As table_transactiondetailsitemRow = CType(Me.NewRow,table_transactiondetailsitemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, T_id, Item_Name, Item_Price, Quantity, Subtotal, Item_ID, Type}
            rowtable_transactiondetailsitemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtable_transactiondetailsitemRow)
            Return rowtable_transactiondetailsitemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByTDI_id(ByVal TDI_id As Integer) As table_transactiondetailsitemRow
            Return CType(Me.Rows.Find(New Object() {TDI_id}),table_transactiondetailsitemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As table_transactiondetailsitemDataTable = CType(MyBase.Clone,table_transactiondetailsitemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New table_transactiondetailsitemDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnTDI_id = MyBase.Columns("TDI_id")
            Me.columnT_id = MyBase.Columns("T_id")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnItem_Price = MyBase.Columns("Item_Price")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnSubtotal = MyBase.Columns("Subtotal")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnTDI_id = New Global.System.Data.DataColumn("TDI_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDI_id)
            Me.columnT_id = New Global.System.Data.DataColumn("T_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_id)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnItem_Price = New Global.System.Data.DataColumn("Item_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Price)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnSubtotal = New Global.System.Data.DataColumn("Subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotal)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTDI_id}, true))
            Me.columnTDI_id.AutoIncrement = true
            Me.columnTDI_id.AutoIncrementSeed = -1
            Me.columnTDI_id.AutoIncrementStep = -1
            Me.columnTDI_id.AllowDBNull = false
            Me.columnTDI_id.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Newtable_transactiondetailsitemRow() As table_transactiondetailsitemRow
            Return CType(Me.NewRow,table_transactiondetailsitemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New table_transactiondetailsitemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(table_transactiondetailsitemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.table_transactiondetailsitemRowChangedEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsitemRowChanged(Me, New table_transactiondetailsitemRowChangeEvent(CType(e.Row,table_transactiondetailsitemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.table_transactiondetailsitemRowChangingEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsitemRowChanging(Me, New table_transactiondetailsitemRowChangeEvent(CType(e.Row,table_transactiondetailsitemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.table_transactiondetailsitemRowDeletedEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsitemRowDeleted(Me, New table_transactiondetailsitemRowChangeEvent(CType(e.Row,table_transactiondetailsitemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.table_transactiondetailsitemRowDeletingEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsitemRowDeleting(Me, New table_transactiondetailsitemRowChangeEvent(CType(e.Row,table_transactiondetailsitemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Removetable_transactiondetailsitemRow(ByVal row As table_transactiondetailsitemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetTransaction = New DataSetTransaction()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "table_transactiondetailsitemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class table_transactiondetailsDataTable
        Inherits Global.System.Data.TypedTableBase(Of table_transactiondetailsRow)
        
        Private columnTD_id As Global.System.Data.DataColumn
        
        Private columnT_id As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnItem_Price As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnSubtotal As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "table_transactiondetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TD_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTD_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property T_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Item_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As table_transactiondetailsRow
            Get
                Return CType(Me.Rows(index),table_transactiondetailsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsRowChanging As table_transactiondetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsRowChanged As table_transactiondetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsRowDeleting As table_transactiondetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event table_transactiondetailsRowDeleted As table_transactiondetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub Addtable_transactiondetailsRow(ByVal row As table_transactiondetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function Addtable_transactiondetailsRow(ByVal T_id As Integer, ByVal Item_Name As String, ByVal Item_Price As Double, ByVal Quantity As Double, ByVal Subtotal As Double, ByVal Item_ID As Integer, ByVal Type As String) As table_transactiondetailsRow
            Dim rowtable_transactiondetailsRow As table_transactiondetailsRow = CType(Me.NewRow,table_transactiondetailsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, T_id, Item_Name, Item_Price, Quantity, Subtotal, Item_ID, Type}
            rowtable_transactiondetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtable_transactiondetailsRow)
            Return rowtable_transactiondetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByTD_id(ByVal TD_id As Integer) As table_transactiondetailsRow
            Return CType(Me.Rows.Find(New Object() {TD_id}),table_transactiondetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As table_transactiondetailsDataTable = CType(MyBase.Clone,table_transactiondetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New table_transactiondetailsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnTD_id = MyBase.Columns("TD_id")
            Me.columnT_id = MyBase.Columns("T_id")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnItem_Price = MyBase.Columns("Item_Price")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnSubtotal = MyBase.Columns("Subtotal")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnTD_id = New Global.System.Data.DataColumn("TD_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTD_id)
            Me.columnT_id = New Global.System.Data.DataColumn("T_id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_id)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnItem_Price = New Global.System.Data.DataColumn("Item_Price", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Price)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnSubtotal = New Global.System.Data.DataColumn("Subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotal)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTD_id}, true))
            Me.columnTD_id.AutoIncrement = true
            Me.columnTD_id.AutoIncrementSeed = -1
            Me.columnTD_id.AutoIncrementStep = -1
            Me.columnTD_id.AllowDBNull = false
            Me.columnTD_id.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Newtable_transactiondetailsRow() As table_transactiondetailsRow
            Return CType(Me.NewRow,table_transactiondetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New table_transactiondetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(table_transactiondetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.table_transactiondetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsRowChanged(Me, New table_transactiondetailsRowChangeEvent(CType(e.Row,table_transactiondetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.table_transactiondetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsRowChanging(Me, New table_transactiondetailsRowChangeEvent(CType(e.Row,table_transactiondetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.table_transactiondetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsRowDeleted(Me, New table_transactiondetailsRowChangeEvent(CType(e.Row,table_transactiondetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.table_transactiondetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent table_transactiondetailsRowDeleting(Me, New table_transactiondetailsRowChangeEvent(CType(e.Row,table_transactiondetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Removetable_transactiondetailsRow(ByVal row As table_transactiondetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetTransaction = New DataSetTransaction()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "table_transactiondetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblguestdetailsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblguestdetailsRow)
        
        Private columnGDetailsID As Global.System.Data.DataColumn
        
        Private columnGuestID As Global.System.Data.DataColumn
        
        Private columnFname As Global.System.Data.DataColumn
        
        Private columnMname As Global.System.Data.DataColumn
        
        Private columnLname As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblguestdetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GDetailsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGDetailsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GuestIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuestID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblguestdetailsRow
            Get
                Return CType(Me.Rows(index),tblguestdetailsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblguestdetailsRowChanging As tblguestdetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblguestdetailsRowChanged As tblguestdetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblguestdetailsRowDeleting As tblguestdetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblguestdetailsRowDeleted As tblguestdetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddtblguestdetailsRow(ByVal row As tblguestdetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddtblguestdetailsRow(ByVal GuestID As Integer, ByVal Fname As String, ByVal Mname As String, ByVal Lname As String, ByVal Gender As String, ByVal Type As String) As tblguestdetailsRow
            Dim rowtblguestdetailsRow As tblguestdetailsRow = CType(Me.NewRow,tblguestdetailsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, GuestID, Fname, Mname, Lname, Gender, Type}
            rowtblguestdetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblguestdetailsRow)
            Return rowtblguestdetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByGDetailsID(ByVal GDetailsID As Integer) As tblguestdetailsRow
            Return CType(Me.Rows.Find(New Object() {GDetailsID}),tblguestdetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblguestdetailsDataTable = CType(MyBase.Clone,tblguestdetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblguestdetailsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnGDetailsID = MyBase.Columns("GDetailsID")
            Me.columnGuestID = MyBase.Columns("GuestID")
            Me.columnFname = MyBase.Columns("Fname")
            Me.columnMname = MyBase.Columns("Mname")
            Me.columnLname = MyBase.Columns("Lname")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnGDetailsID = New Global.System.Data.DataColumn("GDetailsID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGDetailsID)
            Me.columnGuestID = New Global.System.Data.DataColumn("GuestID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuestID)
            Me.columnFname = New Global.System.Data.DataColumn("Fname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFname)
            Me.columnMname = New Global.System.Data.DataColumn("Mname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMname)
            Me.columnLname = New Global.System.Data.DataColumn("Lname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLname)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGDetailsID}, true))
            Me.columnGDetailsID.AutoIncrement = true
            Me.columnGDetailsID.AutoIncrementSeed = -1
            Me.columnGDetailsID.AutoIncrementStep = -1
            Me.columnGDetailsID.AllowDBNull = false
            Me.columnGDetailsID.Unique = true
            Me.columnGuestID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewtblguestdetailsRow() As tblguestdetailsRow
            Return CType(Me.NewRow,tblguestdetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblguestdetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblguestdetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblguestdetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblguestdetailsRowChanged(Me, New tblguestdetailsRowChangeEvent(CType(e.Row,tblguestdetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblguestdetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblguestdetailsRowChanging(Me, New tblguestdetailsRowChangeEvent(CType(e.Row,tblguestdetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblguestdetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblguestdetailsRowDeleted(Me, New tblguestdetailsRowChangeEvent(CType(e.Row,tblguestdetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblguestdetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblguestdetailsRowDeleting(Me, New tblguestdetailsRowChangeEvent(CType(e.Row,tblguestdetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovetblguestdetailsRow(ByVal row As tblguestdetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetTransaction = New DataSetTransaction()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblguestdetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblguestsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblguestsRow)
        
        Private columnGuestID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnContactNo As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnGuestCreated As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblguests"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GuestIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuestID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ContactNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GuestCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuestCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblguestsRow
            Get
                Return CType(Me.Rows(index),tblguestsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblguestsRowChanging As tblguestsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblguestsRowChanged As tblguestsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblguestsRowDeleting As tblguestsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tblguestsRowDeleted As tblguestsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddtblguestsRow(ByVal row As tblguestsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddtblguestsRow(ByVal Name As String, ByVal Email As String, ByVal ContactNo As String, ByVal Address As String, ByVal GuestCreated As Date, ByVal Status As String, ByVal Remarks As String) As tblguestsRow
            Dim rowtblguestsRow As tblguestsRow = CType(Me.NewRow,tblguestsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Name, Email, ContactNo, Address, GuestCreated, Status, Remarks}
            rowtblguestsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblguestsRow)
            Return rowtblguestsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByGuestID(ByVal GuestID As Integer) As tblguestsRow
            Return CType(Me.Rows.Find(New Object() {GuestID}),tblguestsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblguestsDataTable = CType(MyBase.Clone,tblguestsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblguestsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnGuestID = MyBase.Columns("GuestID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnContactNo = MyBase.Columns("ContactNo")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnGuestCreated = MyBase.Columns("GuestCreated")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnGuestID = New Global.System.Data.DataColumn("GuestID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuestID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnContactNo = New Global.System.Data.DataColumn("ContactNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactNo)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnGuestCreated = New Global.System.Data.DataColumn("GuestCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuestCreated)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGuestID}, true))
            Me.columnGuestID.AutoIncrement = true
            Me.columnGuestID.AutoIncrementSeed = -1
            Me.columnGuestID.AutoIncrementStep = -1
            Me.columnGuestID.AllowDBNull = false
            Me.columnGuestID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewtblguestsRow() As tblguestsRow
            Return CType(Me.NewRow,tblguestsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblguestsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblguestsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblguestsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblguestsRowChanged(Me, New tblguestsRowChangeEvent(CType(e.Row,tblguestsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblguestsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblguestsRowChanging(Me, New tblguestsRowChangeEvent(CType(e.Row,tblguestsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblguestsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblguestsRowDeleted(Me, New tblguestsRowChangeEvent(CType(e.Row,tblguestsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblguestsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblguestsRowDeleting(Me, New tblguestsRowChangeEvent(CType(e.Row,tblguestsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovetblguestsRow(ByVal row As tblguestsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetTransaction = New DataSetTransaction()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblguestsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class table_transactionsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletable_transactions As table_transactionsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletable_transactions = CType(Me.Table,table_transactionsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property T_id() As Integer
            Get
                Return CType(Me(Me.tabletable_transactions.T_idColumn),Integer)
            End Get
            Set
                Me(Me.tabletable_transactions.T_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property U_id() As Integer
            Get
                Return CType(Me(Me.tabletable_transactions.U_idColumn),Integer)
            End Get
            Set
                Me(Me.tabletable_transactions.U_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property G_id() As Integer
            Get
                Return CType(Me(Me.tabletable_transactions.G_idColumn),Integer)
            End Get
            Set
                Me(Me.tabletable_transactions.G_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TransDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactions.TransDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransDate' in table 'table_transactions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactions.TransDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactions.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'table_transactions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactions.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CheckIn() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactions.CheckInColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CheckIn' in table 'table_transactions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactions.CheckInColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Checkout() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactions.CheckoutColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Checkout' in table 'table_transactions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactions.CheckoutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Discount() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactions.DiscountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Discount' in table 'table_transactions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactions.DiscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Advance() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactions.AdvanceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Advance' in table 'table_transactions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactions.AdvanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactions.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'table_transactions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactions.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTransDateNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactions.TransDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTransDateNull()
            Me(Me.tabletable_transactions.TransDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactions.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatusNull()
            Me(Me.tabletable_transactions.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCheckInNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactions.CheckInColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCheckInNull()
            Me(Me.tabletable_transactions.CheckInColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCheckoutNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactions.CheckoutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCheckoutNull()
            Me(Me.tabletable_transactions.CheckoutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactions.DiscountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDiscountNull()
            Me(Me.tabletable_transactions.DiscountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAdvanceNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactions.AdvanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAdvanceNull()
            Me(Me.tabletable_transactions.AdvanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactions.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTotalNull()
            Me(Me.tabletable_transactions.TotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblusersRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblusers As tblusersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblusers = CType(Me.Table,tblusersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UserID() As Integer
            Get
                Return CType(Me(Me.tabletblusers.UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblusers.UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Fname() As String
            Get
                Return CType(Me(Me.tabletblusers.FnameColumn),String)
            End Get
            Set
                Me(Me.tabletblusers.FnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Mname() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblusers.MnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mname' in table 'tblusers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblusers.MnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Lname() As String
            Get
                Return CType(Me(Me.tabletblusers.LnameColumn),String)
            End Get
            Set
                Me(Me.tabletblusers.LnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblusers.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'tblusers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblusers.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblusers.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'tblusers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblusers.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ContactNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblusers.ContactNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactNo' in table 'tblusers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblusers.ContactNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblusers.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'tblusers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblusers.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Birthdate() As Date
            Get
                Return CType(Me(Me.tabletblusers.BirthdateColumn),Date)
            End Get
            Set
                Me(Me.tabletblusers.BirthdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UserCreated() As Date
            Get
                Return CType(Me(Me.tabletblusers.UserCreatedColumn),Date)
            End Get
            Set
                Me(Me.tabletblusers.UserCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Usertype() As String
            Get
                Return CType(Me(Me.tabletblusers.UsertypeColumn),String)
            End Get
            Set
                Me(Me.tabletblusers.UsertypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Username() As String
            Get
                Return CType(Me(Me.tabletblusers.UsernameColumn),String)
            End Get
            Set
                Me(Me.tabletblusers.UsernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Password() As String
            Get
                Return CType(Me(Me.tabletblusers.PasswordColumn),String)
            End Get
            Set
                Me(Me.tabletblusers.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMnameNull() As Boolean
            Return Me.IsNull(Me.tabletblusers.MnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMnameNull()
            Me(Me.tabletblusers.MnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tabletblusers.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGenderNull()
            Me(Me.tabletblusers.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tabletblusers.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEmailNull()
            Me(Me.tabletblusers.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContactNoNull() As Boolean
            Return Me.IsNull(Me.tabletblusers.ContactNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContactNoNull()
            Me(Me.tabletblusers.ContactNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tabletblusers.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAddressNull()
            Me(Me.tabletblusers.AddressColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblpaymentRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblpayment As tblpaymentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblpayment = CType(Me.Table,tblpaymentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PaymentID() As Integer
            Get
                Return CType(Me(Me.tabletblpayment.PaymentIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblpayment.PaymentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GuestID() As Integer
            Get
                Return CType(Me(Me.tabletblpayment.GuestIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblpayment.GuestIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property T_ID() As Integer
            Get
                Return CType(Me(Me.tabletblpayment.T_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblpayment.T_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ReservationID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblpayment.ReservationIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReservationID' in table 'tblpayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblpayment.ReservationIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AmountPaid() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblpayment.AmountPaidColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AmountPaid' in table 'tblpayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblpayment.AmountPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Change() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblpayment.ChangeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Change' in table 'tblpayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblpayment.ChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TotalChange() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblpayment.TotalChangeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalChange' in table 'tblpayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblpayment.TotalChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DatePayed() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblpayment.DatePayedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatePayed' in table 'tblpayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblpayment.DatePayedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReservationIDNull() As Boolean
            Return Me.IsNull(Me.tabletblpayment.ReservationIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReservationIDNull()
            Me(Me.tabletblpayment.ReservationIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAmountPaidNull() As Boolean
            Return Me.IsNull(Me.tabletblpayment.AmountPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAmountPaidNull()
            Me(Me.tabletblpayment.AmountPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsChangeNull() As Boolean
            Return Me.IsNull(Me.tabletblpayment.ChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetChangeNull()
            Me(Me.tabletblpayment.ChangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTotalChangeNull() As Boolean
            Return Me.IsNull(Me.tabletblpayment.TotalChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTotalChangeNull()
            Me(Me.tabletblpayment.TotalChangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDatePayedNull() As Boolean
            Return Me.IsNull(Me.tabletblpayment.DatePayedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDatePayedNull()
            Me(Me.tabletblpayment.DatePayedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class table_transactiondetailsvenueRow
        Inherits Global.System.Data.DataRow
        
        Private tabletable_transactiondetailsvenue As table_transactiondetailsvenueDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletable_transactiondetailsvenue = CType(Me.Table,table_transactiondetailsvenueDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TDV_id() As Integer
            Get
                Return CType(Me(Me.tabletable_transactiondetailsvenue.TDV_idColumn),Integer)
            End Get
            Set
                Me(Me.tabletable_transactiondetailsvenue.TDV_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property T_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsvenue.T_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'T_id' in table 'table_transactiondetailsvenue' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsvenue.T_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsvenue.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'table_transactiondetailsvenue' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsvenue.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Item_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsvenue.Item_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Price' in table 'table_transactiondetailsvenue' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsvenue.Item_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Quantity() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsvenue.QuantityColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'table_transactiondetailsvenue' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsvenue.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsvenue.SubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subtotal' in table 'table_transactiondetailsvenue' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsvenue.SubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Item_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsvenue.Item_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_ID' in table 'table_transactiondetailsvenue' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsvenue.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsvenue.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'table_transactiondetailsvenue' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsvenue.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsT_idNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsvenue.T_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetT_idNull()
            Me(Me.tabletable_transactiondetailsvenue.T_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsvenue.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabletable_transactiondetailsvenue.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsItem_PriceNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsvenue.Item_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetItem_PriceNull()
            Me(Me.tabletable_transactiondetailsvenue.Item_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsvenue.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetQuantityNull()
            Me(Me.tabletable_transactiondetailsvenue.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSubtotalNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsvenue.SubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSubtotalNull()
            Me(Me.tabletable_transactiondetailsvenue.SubtotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsItem_IDNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsvenue.Item_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetItem_IDNull()
            Me(Me.tabletable_transactiondetailsvenue.Item_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsvenue.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tabletable_transactiondetailsvenue.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class table_transactiondetailsitemRow
        Inherits Global.System.Data.DataRow
        
        Private tabletable_transactiondetailsitem As table_transactiondetailsitemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletable_transactiondetailsitem = CType(Me.Table,table_transactiondetailsitemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TDI_id() As Integer
            Get
                Return CType(Me(Me.tabletable_transactiondetailsitem.TDI_idColumn),Integer)
            End Get
            Set
                Me(Me.tabletable_transactiondetailsitem.TDI_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property T_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsitem.T_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'T_id' in table 'table_transactiondetailsitem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsitem.T_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsitem.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'table_transactiondetailsitem' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsitem.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Item_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsitem.Item_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Price' in table 'table_transactiondetailsitem' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsitem.Item_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Quantity() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsitem.QuantityColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'table_transactiondetailsitem' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsitem.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsitem.SubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subtotal' in table 'table_transactiondetailsitem' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsitem.SubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Item_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsitem.Item_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_ID' in table 'table_transactiondetailsitem' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsitem.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetailsitem.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'table_transactiondetailsitem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetailsitem.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsT_idNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsitem.T_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetT_idNull()
            Me(Me.tabletable_transactiondetailsitem.T_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsitem.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabletable_transactiondetailsitem.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsItem_PriceNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsitem.Item_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetItem_PriceNull()
            Me(Me.tabletable_transactiondetailsitem.Item_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsitem.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetQuantityNull()
            Me(Me.tabletable_transactiondetailsitem.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSubtotalNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsitem.SubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSubtotalNull()
            Me(Me.tabletable_transactiondetailsitem.SubtotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsItem_IDNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsitem.Item_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetItem_IDNull()
            Me(Me.tabletable_transactiondetailsitem.Item_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetailsitem.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tabletable_transactiondetailsitem.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class table_transactiondetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletable_transactiondetails As table_transactiondetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletable_transactiondetails = CType(Me.Table,table_transactiondetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TD_id() As Integer
            Get
                Return CType(Me(Me.tabletable_transactiondetails.TD_idColumn),Integer)
            End Get
            Set
                Me(Me.tabletable_transactiondetails.TD_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property T_id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetails.T_idColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'T_id' in table 'table_transactiondetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetails.T_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetails.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'table_transactiondetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetails.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Item_Price() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetails.Item_PriceColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Price' in table 'table_transactiondetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetails.Item_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Quantity() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetails.QuantityColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'table_transactiondetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetails.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetails.SubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Subtotal' in table 'table_transactiondetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetails.SubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Item_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetails.Item_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_ID' in table 'table_transactiondetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetails.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tabletable_transactiondetails.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'table_transactiondetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletable_transactiondetails.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsT_idNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetails.T_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetT_idNull()
            Me(Me.tabletable_transactiondetails.T_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetails.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabletable_transactiondetails.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsItem_PriceNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetails.Item_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetItem_PriceNull()
            Me(Me.tabletable_transactiondetails.Item_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetails.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetQuantityNull()
            Me(Me.tabletable_transactiondetails.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSubtotalNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetails.SubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSubtotalNull()
            Me(Me.tabletable_transactiondetails.SubtotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsItem_IDNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetails.Item_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetItem_IDNull()
            Me(Me.tabletable_transactiondetails.Item_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tabletable_transactiondetails.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tabletable_transactiondetails.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblguestdetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblguestdetails As tblguestdetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblguestdetails = CType(Me.Table,tblguestdetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GDetailsID() As Integer
            Get
                Return CType(Me(Me.tabletblguestdetails.GDetailsIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblguestdetails.GDetailsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GuestID() As Integer
            Get
                Return CType(Me(Me.tabletblguestdetails.GuestIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblguestdetails.GuestIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Fname() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguestdetails.FnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fname' in table 'tblguestdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguestdetails.FnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Mname() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguestdetails.MnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mname' in table 'tblguestdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguestdetails.MnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Lname() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguestdetails.LnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lname' in table 'tblguestdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguestdetails.LnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguestdetails.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'tblguestdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguestdetails.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguestdetails.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'tblguestdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguestdetails.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFnameNull() As Boolean
            Return Me.IsNull(Me.tabletblguestdetails.FnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFnameNull()
            Me(Me.tabletblguestdetails.FnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMnameNull() As Boolean
            Return Me.IsNull(Me.tabletblguestdetails.MnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMnameNull()
            Me(Me.tabletblguestdetails.MnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLnameNull() As Boolean
            Return Me.IsNull(Me.tabletblguestdetails.LnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLnameNull()
            Me(Me.tabletblguestdetails.LnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tabletblguestdetails.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGenderNull()
            Me(Me.tabletblguestdetails.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tabletblguestdetails.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tabletblguestdetails.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblguestsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblguests As tblguestsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblguests = CType(Me.Table,tblguestsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GuestID() As Integer
            Get
                Return CType(Me(Me.tabletblguests.GuestIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblguests.GuestIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguests.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'tblguests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguests.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguests.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'tblguests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguests.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ContactNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguests.ContactNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactNo' in table 'tblguests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguests.ContactNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguests.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'tblguests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguests.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GuestCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblguests.GuestCreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GuestCreated' in table 'tblguests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguests.GuestCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguests.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'tblguests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguests.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblguests.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'tblguests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblguests.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tabletblguests.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNameNull()
            Me(Me.tabletblguests.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tabletblguests.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEmailNull()
            Me(Me.tabletblguests.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsContactNoNull() As Boolean
            Return Me.IsNull(Me.tabletblguests.ContactNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetContactNoNull()
            Me(Me.tabletblguests.ContactNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tabletblguests.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAddressNull()
            Me(Me.tabletblguests.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGuestCreatedNull() As Boolean
            Return Me.IsNull(Me.tabletblguests.GuestCreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGuestCreatedNull()
            Me(Me.tabletblguests.GuestCreatedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tabletblguests.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatusNull()
            Me(Me.tabletblguests.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tabletblguests.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRemarksNull()
            Me(Me.tabletblguests.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class table_transactionsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As table_transactionsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As table_transactionsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As table_transactionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class tblusersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblusersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As tblusersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As tblusersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class tblpaymentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblpaymentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As tblpaymentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As tblpaymentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class table_transactiondetailsvenueRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As table_transactiondetailsvenueRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As table_transactiondetailsvenueRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As table_transactiondetailsvenueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class table_transactiondetailsitemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As table_transactiondetailsitemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As table_transactiondetailsitemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As table_transactiondetailsitemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class table_transactiondetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As table_transactiondetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As table_transactiondetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As table_transactiondetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class tblguestdetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblguestdetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As tblguestdetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As tblguestdetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class tblguestsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblguestsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As tblguestsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As tblguestsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetTransactionTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class table_transactionsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.MySql.MySqlDataAdapter
        
        Private _connection As Global.Devart.Data.MySql.MySqlConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.MySql.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.MySql.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.MySql.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.MySql.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.MySql.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.MySql.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "table_transactions"
            tableMapping.ColumnMappings.Add("T_id", "T_id")
            tableMapping.ColumnMappings.Add("U_id", "U_id")
            tableMapping.ColumnMappings.Add("G_id", "G_id")
            tableMapping.ColumnMappings.Add("TransDate", "TransDate")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("CheckIn", "CheckIn")
            tableMapping.ColumnMappings.Add("Checkout", "Checkout")
            tableMapping.ColumnMappings.Add("Discount", "Discount")
            tableMapping.ColumnMappings.Add("Advance", "Advance")
            tableMapping.ColumnMappings.Add("Total", "Total")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `jrm`.`table_transactions` WHERE ((`T_id` = :Original_T_id) AND (`U_i"& _ 
                "d` = :Original_U_id) AND (`G_id` = :Original_G_id) AND ((:IsNull_TransDate = 1 A"& _ 
                "ND `TransDate` IS NULL) OR (`TransDate` = :Original_TransDate)) AND ((:IsNull_St"& _ 
                "atus = 1 AND `Status` IS NULL) OR (`Status` = :Original_Status)) AND ((:IsNull_C"& _ 
                "heckIn = 1 AND `CheckIn` IS NULL) OR (`CheckIn` = :Original_CheckIn)) AND ((:IsN"& _ 
                "ull_Checkout = 1 AND `Checkout` IS NULL) OR (`Checkout` = :Original_Checkout)) A"& _ 
                "ND ((:IsNull_Discount = 1 AND `Discount` IS NULL) OR (`Discount` = :Original_Dis"& _ 
                "count)) AND ((:IsNull_Advance = 1 AND `Advance` IS NULL) OR (`Advance` = :Origin"& _ 
                "al_Advance)) AND ((:IsNull_Total = 1 AND `Total` IS NULL) OR (`Total` = :Origina"& _ 
                "l_Total)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.MySql.MySqlParameter = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_U_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "U_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_G_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "G_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_TransDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "TransDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_TransDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TransDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Status"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Status"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_CheckIn"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "CheckIn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_CheckIn"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Date]
            param.IsNullable = true
            param.SourceColumn = "CheckIn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Checkout"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Checkout"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Checkout"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Date]
            param.IsNullable = true
            param.SourceColumn = "Checkout"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Discount"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Discount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Discount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Discount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Advance"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Advance"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Advance"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Advance"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Total"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Total"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Total"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Total"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `jrm`.`table_transactions` (`U_id`, `G_id`, `TransDate`, `Status`, `C"& _ 
                "heckIn`, `Checkout`, `Discount`, `Advance`, `Total`) VALUES (:U_id, :G_id, :Tran"& _ 
                "sDate, :Status, :CheckIn, :Checkout, :Discount, :Advance, :Total)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "U_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "U_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "G_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "G_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "TransDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TransDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Status"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "CheckIn"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Date]
            param.IsNullable = true
            param.SourceColumn = "CheckIn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Checkout"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Date]
            param.IsNullable = true
            param.SourceColumn = "Checkout"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Discount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Discount"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Advance"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Advance"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Total"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Total"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `jrm`.`table_transactions` SET `U_id` = :U_id, `G_id` = :G_id, `TransDate`"& _ 
                " = :TransDate, `Status` = :Status, `CheckIn` = :CheckIn, `Checkout` = :Checkout,"& _ 
                " `Discount` = :Discount, `Advance` = :Advance, `Total` = :Total WHERE ((`T_id` ="& _ 
                " :Original_T_id) AND (`U_id` = :Original_U_id) AND (`G_id` = :Original_G_id) AND"& _ 
                " ((:IsNull_TransDate = 1 AND `TransDate` IS NULL) OR (`TransDate` = :Original_Tr"& _ 
                "ansDate)) AND ((:IsNull_Status = 1 AND `Status` IS NULL) OR (`Status` = :Origina"& _ 
                "l_Status)) AND ((:IsNull_CheckIn = 1 AND `CheckIn` IS NULL) OR (`CheckIn` = :Ori"& _ 
                "ginal_CheckIn)) AND ((:IsNull_Checkout = 1 AND `Checkout` IS NULL) OR (`Checkout"& _ 
                "` = :Original_Checkout)) AND ((:IsNull_Discount = 1 AND `Discount` IS NULL) OR ("& _ 
                "`Discount` = :Original_Discount)) AND ((:IsNull_Advance = 1 AND `Advance` IS NUL"& _ 
                "L) OR (`Advance` = :Original_Advance)) AND ((:IsNull_Total = 1 AND `Total` IS NU"& _ 
                "LL) OR (`Total` = :Original_Total)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "U_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "U_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "G_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "G_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "TransDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TransDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Status"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "CheckIn"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Date]
            param.IsNullable = true
            param.SourceColumn = "CheckIn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Checkout"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Date]
            param.IsNullable = true
            param.SourceColumn = "Checkout"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Discount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Discount"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Advance"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Advance"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Total"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Total"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_U_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "U_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_G_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "G_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_TransDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "TransDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_TransDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "TransDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Status"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Status"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_CheckIn"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "CheckIn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_CheckIn"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Date]
            param.IsNullable = true
            param.SourceColumn = "CheckIn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Checkout"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Checkout"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Checkout"
            param.DbType = Global.System.Data.DbType.[Date]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Date]
            param.IsNullable = true
            param.SourceColumn = "Checkout"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Discount"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Discount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Discount"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Discount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Advance"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Advance"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Advance"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Advance"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Total"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Total"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Total"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Total"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.MySql.MySqlConnection()
            Me._connection.ConnectionString = Global.JRM__JP_UniversalWindows_.My.MySettings.Default.jrmConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.MySql.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.MySql.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        T_id, U_id, G_id, TransDate, Status, CheckIn, Checkout, Discount, A"& _ 
                "dvance, Total"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            table_transactions"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTransaction.table_transactionsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTransaction.table_transactionsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTransaction.table_transactionsDataTable = New DataSetTransaction.table_transactionsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTransaction.table_transactionsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTransaction) As Integer
            Return Me.Adapter.Update(dataSet, "table_transactions")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_T_id As Integer, ByVal Original_U_id As Integer, ByVal Original_G_id As Integer, ByVal Original_TransDate As Global.System.Nullable(Of Date), ByVal Original_Status As String, ByVal Original_CheckIn As Global.System.Nullable(Of Date), ByVal Original_Checkout As Global.System.Nullable(Of Date), ByVal Original_Discount As Global.System.Nullable(Of Double), ByVal Original_Advance As Global.System.Nullable(Of Double), ByVal Original_Total As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_T_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_U_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_G_id,Integer)
            If (Original_TransDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TransDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Status,String)
            End If
            If (Original_CheckIn.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CheckIn.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Checkout.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Checkout.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Discount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Discount.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Advance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Advance.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Total.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Total.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal U_id As Integer, ByVal G_id As Integer, ByVal TransDate As Global.System.Nullable(Of Date), ByVal Status As String, ByVal CheckIn As Global.System.Nullable(Of Date), ByVal Checkout As Global.System.Nullable(Of Date), ByVal Discount As Global.System.Nullable(Of Double), ByVal Advance As Global.System.Nullable(Of Double), ByVal Total As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(U_id,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(G_id,Integer)
            If (TransDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TransDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Status,String)
            End If
            If (CheckIn.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CheckIn.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Checkout.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Checkout.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Discount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Discount.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Advance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Advance.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Total.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Total.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal U_id As Integer,  _
                    ByVal G_id As Integer,  _
                    ByVal TransDate As Global.System.Nullable(Of Date),  _
                    ByVal Status As String,  _
                    ByVal CheckIn As Global.System.Nullable(Of Date),  _
                    ByVal Checkout As Global.System.Nullable(Of Date),  _
                    ByVal Discount As Global.System.Nullable(Of Double),  _
                    ByVal Advance As Global.System.Nullable(Of Double),  _
                    ByVal Total As Global.System.Nullable(Of Double),  _
                    ByVal Original_T_id As Integer,  _
                    ByVal Original_U_id As Integer,  _
                    ByVal Original_G_id As Integer,  _
                    ByVal Original_TransDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Status As String,  _
                    ByVal Original_CheckIn As Global.System.Nullable(Of Date),  _
                    ByVal Original_Checkout As Global.System.Nullable(Of Date),  _
                    ByVal Original_Discount As Global.System.Nullable(Of Double),  _
                    ByVal Original_Advance As Global.System.Nullable(Of Double),  _
                    ByVal Original_Total As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(U_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(G_id,Integer)
            If (TransDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TransDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Status,String)
            End If
            If (CheckIn.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CheckIn.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Checkout.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Checkout.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Discount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Discount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Advance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Advance.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Total.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_T_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_U_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_G_id,Integer)
            If (Original_TransDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_TransDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Status,String)
            End If
            If (Original_CheckIn.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_CheckIn.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_Checkout.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Checkout.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_Discount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Discount.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_Advance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Advance.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_Total.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Total.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblusersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.MySql.MySqlDataAdapter
        
        Private _connection As Global.Devart.Data.MySql.MySqlConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.MySql.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.MySql.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.MySql.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.MySql.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.MySql.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.MySql.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblusers"
            tableMapping.ColumnMappings.Add("UserID", "UserID")
            tableMapping.ColumnMappings.Add("Fname", "Fname")
            tableMapping.ColumnMappings.Add("Mname", "Mname")
            tableMapping.ColumnMappings.Add("Lname", "Lname")
            tableMapping.ColumnMappings.Add("Gender", "Gender")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("ContactNo", "ContactNo")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Birthdate", "Birthdate")
            tableMapping.ColumnMappings.Add("UserCreated", "UserCreated")
            tableMapping.ColumnMappings.Add("Usertype", "Usertype")
            tableMapping.ColumnMappings.Add("Username", "Username")
            tableMapping.ColumnMappings.Add("Password", "Password")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `jrm`.`tblusers` WHERE ((`UserID` = :Original_UserID) AND (`Fname` = "& _ 
                ":Original_Fname) AND ((:IsNull_Mname = 1 AND `Mname` IS NULL) OR (`Mname` = :Ori"& _ 
                "ginal_Mname)) AND (`Lname` = :Original_Lname) AND ((:IsNull_Gender = 1 AND `Gend"& _ 
                "er` IS NULL) OR (`Gender` = :Original_Gender)) AND ((:IsNull_Email = 1 AND `Emai"& _ 
                "l` IS NULL) OR (`Email` = :Original_Email)) AND ((:IsNull_ContactNo = 1 AND `Con"& _ 
                "tactNo` IS NULL) OR (`ContactNo` = :Original_ContactNo)) AND ((:IsNull_Address ="& _ 
                " 1 AND `Address` IS NULL) OR (`Address` = :Original_Address)) AND (`Birthdate` ="& _ 
                " :Original_Birthdate) AND (`UserCreated` = :Original_UserCreated) AND (`Usertype"& _ 
                "` = :Original_Usertype) AND (`Username` = :Original_Username) AND (`Password` = "& _ 
                ":Original_Password))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.MySql.MySqlParameter = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_UserID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "UserID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Fname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Mname"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Mname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Mname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Lname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Lname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Gender"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Gender"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Gender"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Gender"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Email"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Email"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_ContactNo"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_ContactNo"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Address"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Address"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Birthdate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Birthdate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_UserCreated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "UserCreated"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Usertype"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Usertype"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Username"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Username"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Password"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `jrm`.`tblusers` (`Fname`, `Mname`, `Lname`, `Gender`, `Email`, `Cont"& _ 
                "actNo`, `Address`, `Birthdate`, `UserCreated`, `Usertype`, `Username`, `Password"& _ 
                "`) VALUES (:Fname, :Mname, :Lname, :Gender, :Email, :ContactNo, :Address, :Birth"& _ 
                "date, :UserCreated, :Usertype, :Username, :Password)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Fname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Mname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Lname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Lname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Gender"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Gender"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Email"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "ContactNo"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Address"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Birthdate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Birthdate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "UserCreated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "UserCreated"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Usertype"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Usertype"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Username"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Username"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Password"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `jrm`.`tblusers` SET `Fname` = :Fname, `Mname` = :Mname, `Lname` = :Lname,"& _ 
                " `Gender` = :Gender, `Email` = :Email, `ContactNo` = :ContactNo, `Address` = :Ad"& _ 
                "dress, `Birthdate` = :Birthdate, `UserCreated` = :UserCreated, `Usertype` = :Use"& _ 
                "rtype, `Username` = :Username, `Password` = :Password WHERE ((`UserID` = :Origin"& _ 
                "al_UserID) AND (`Fname` = :Original_Fname) AND ((:IsNull_Mname = 1 AND `Mname` I"& _ 
                "S NULL) OR (`Mname` = :Original_Mname)) AND (`Lname` = :Original_Lname) AND ((:I"& _ 
                "sNull_Gender = 1 AND `Gender` IS NULL) OR (`Gender` = :Original_Gender)) AND ((:"& _ 
                "IsNull_Email = 1 AND `Email` IS NULL) OR (`Email` = :Original_Email)) AND ((:IsN"& _ 
                "ull_ContactNo = 1 AND `ContactNo` IS NULL) OR (`ContactNo` = :Original_ContactNo"& _ 
                ")) AND ((:IsNull_Address = 1 AND `Address` IS NULL) OR (`Address` = :Original_Ad"& _ 
                "dress)) AND (`Birthdate` = :Original_Birthdate) AND (`UserCreated` = :Original_U"& _ 
                "serCreated) AND (`Usertype` = :Original_Usertype) AND (`Username` = :Original_Us"& _ 
                "ername) AND (`Password` = :Original_Password))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Fname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Mname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Lname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Lname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Gender"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Gender"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Email"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "ContactNo"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Address"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Birthdate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Birthdate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "UserCreated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "UserCreated"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Usertype"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Usertype"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Username"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Username"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Password"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_UserID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "UserID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Fname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Mname"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Mname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Mname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Lname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Lname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Gender"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Gender"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Gender"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Gender"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Email"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Email"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_ContactNo"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_ContactNo"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Address"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Address"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Birthdate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Birthdate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_UserCreated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "UserCreated"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Usertype"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Usertype"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Username"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Username"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Password"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Password"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.MySql.MySqlConnection()
            Me._connection.ConnectionString = Global.JRM__JP_UniversalWindows_.My.MySettings.Default.jrmConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.MySql.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.MySql.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT UserID, Fname, Mname, Lname, Gender, Email, ContactNo, Address, Birthdate,"& _ 
                " UserCreated, Usertype, Username, `Password` FROM jrm.tblusers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTransaction.tblusersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTransaction.tblusersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTransaction.tblusersDataTable = New DataSetTransaction.tblusersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTransaction.tblusersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTransaction) As Integer
            Return Me.Adapter.Update(dataSet, "tblusers")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_UserID As Integer, ByVal Original_Fname As String, ByVal Original_Mname As String, ByVal Original_Lname As String, ByVal Original_Gender As String, ByVal Original_Email As String, ByVal Original_ContactNo As String, ByVal Original_Address As String, ByVal Original_Birthdate As Date, ByVal Original_UserCreated As Date, ByVal Original_Usertype As String, ByVal Original_Username As String, ByVal Original_Password As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_UserID,Integer)
            If (Original_Fname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Fname")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Fname,String)
            End If
            If (Original_Mname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Mname,String)
            End If
            If (Original_Lname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Lname")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Lname,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Gender,String)
            End If
            If (Original_Email Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Email,String)
            End If
            If (Original_ContactNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ContactNo,String)
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Address,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Birthdate,Date)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_UserCreated,Date)
            If (Original_Usertype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Usertype")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Usertype,String)
            End If
            If (Original_Username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Username")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Username,String)
            End If
            If (Original_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Password")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Password,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Fname As String, ByVal Mname As String, ByVal Lname As String, ByVal Gender As String, ByVal Email As String, ByVal ContactNo As String, ByVal Address As String, ByVal Birthdate As Date, ByVal UserCreated As Date, ByVal Usertype As String, ByVal Username As String, ByVal Password As String) As Integer
            If (Fname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Fname")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Fname,String)
            End If
            If (Mname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Mname,String)
            End If
            If (Lname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Lname")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Lname,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Gender,String)
            End If
            If (Email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Email,String)
            End If
            If (ContactNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ContactNo,String)
            End If
            If (Address Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Address,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Birthdate,Date)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(UserCreated,Date)
            If (Usertype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Usertype")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Usertype,String)
            End If
            If (Username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Username")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Username,String)
            End If
            If (Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Password")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Password,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Fname As String,  _
                    ByVal Mname As String,  _
                    ByVal Lname As String,  _
                    ByVal Gender As String,  _
                    ByVal Email As String,  _
                    ByVal ContactNo As String,  _
                    ByVal Address As String,  _
                    ByVal Birthdate As Date,  _
                    ByVal UserCreated As Date,  _
                    ByVal Usertype As String,  _
                    ByVal Username As String,  _
                    ByVal Password As String,  _
                    ByVal Original_UserID As Integer,  _
                    ByVal Original_Fname As String,  _
                    ByVal Original_Mname As String,  _
                    ByVal Original_Lname As String,  _
                    ByVal Original_Gender As String,  _
                    ByVal Original_Email As String,  _
                    ByVal Original_ContactNo As String,  _
                    ByVal Original_Address As String,  _
                    ByVal Original_Birthdate As Date,  _
                    ByVal Original_UserCreated As Date,  _
                    ByVal Original_Usertype As String,  _
                    ByVal Original_Username As String,  _
                    ByVal Original_Password As String) As Integer
            If (Fname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Fname")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Fname,String)
            End If
            If (Mname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Mname,String)
            End If
            If (Lname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Lname")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Lname,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Gender,String)
            End If
            If (Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Email,String)
            End If
            If (ContactNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ContactNo,String)
            End If
            If (Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Address,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Birthdate,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(UserCreated,Date)
            If (Usertype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Usertype")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Usertype,String)
            End If
            If (Username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Username")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Username,String)
            End If
            If (Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Password")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Password,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_UserID,Integer)
            If (Original_Fname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Fname")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Fname,String)
            End If
            If (Original_Mname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Mname,String)
            End If
            If (Original_Lname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Lname")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Lname,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Gender,String)
            End If
            If (Original_Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Email,String)
            End If
            If (Original_ContactNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ContactNo,String)
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Address,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Birthdate,Date)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_UserCreated,Date)
            If (Original_Usertype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Usertype")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Usertype,String)
            End If
            If (Original_Username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Username")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Username,String)
            End If
            If (Original_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Password")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Password,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblpaymentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.MySql.MySqlDataAdapter
        
        Private _connection As Global.Devart.Data.MySql.MySqlConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.MySql.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.MySql.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.MySql.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.MySql.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.MySql.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.MySql.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblpayment"
            tableMapping.ColumnMappings.Add("PaymentID", "PaymentID")
            tableMapping.ColumnMappings.Add("GuestID", "GuestID")
            tableMapping.ColumnMappings.Add("T_ID", "T_ID")
            tableMapping.ColumnMappings.Add("ReservationID", "ReservationID")
            tableMapping.ColumnMappings.Add("AmountPaid", "AmountPaid")
            tableMapping.ColumnMappings.Add("Change", "Change")
            tableMapping.ColumnMappings.Add("TotalChange", "TotalChange")
            tableMapping.ColumnMappings.Add("DatePayed", "DatePayed")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `jrm`.`tblpayment` WHERE ((`PaymentID` = :Original_PaymentID) AND (`G"& _ 
                "uestID` = :Original_GuestID) AND (`T_ID` = :Original_T_ID) AND ((:IsNull_Reserva"& _ 
                "tionID = 1 AND `ReservationID` IS NULL) OR (`ReservationID` = :Original_Reservat"& _ 
                "ionID)) AND ((:IsNull_AmountPaid = 1 AND `AmountPaid` IS NULL) OR (`AmountPaid` "& _ 
                "= :Original_AmountPaid)) AND ((:IsNull_Change = 1 AND `Change` IS NULL) OR (`Cha"& _ 
                "nge` = :Original_Change)) AND ((:IsNull_TotalChange = 1 AND `TotalChange` IS NUL"& _ 
                "L) OR (`TotalChange` = :Original_TotalChange)) AND ((:IsNull_DatePayed = 1 AND `"& _ 
                "DatePayed` IS NULL) OR (`DatePayed` = :Original_DatePayed)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.MySql.MySqlParameter = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_PaymentID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "PaymentID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_GuestID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_T_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_ReservationID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "ReservationID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_ReservationID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "ReservationID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_AmountPaid"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "AmountPaid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_AmountPaid"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "AmountPaid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Change"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Change"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Change"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Change"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_TotalChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "TotalChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_TotalChange"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "TotalChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_DatePayed"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "DatePayed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_DatePayed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "DatePayed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `jrm`.`tblpayment` (`GuestID`, `T_ID`, `ReservationID`, `AmountPaid`,"& _ 
                " `Change`, `TotalChange`, `DatePayed`) VALUES (:GuestID, :T_ID, :ReservationID, "& _ 
                ":AmountPaid, :Change, :TotalChange, :DatePayed)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "GuestID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "T_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "ReservationID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "ReservationID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "AmountPaid"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "AmountPaid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Change"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Change"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "TotalChange"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "TotalChange"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "DatePayed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "DatePayed"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `jrm`.`tblpayment` SET `GuestID` = :GuestID, `T_ID` = :T_ID, `ReservationI"& _ 
                "D` = :ReservationID, `AmountPaid` = :AmountPaid, `Change` = :Change, `TotalChang"& _ 
                "e` = :TotalChange, `DatePayed` = :DatePayed WHERE ((`PaymentID` = :Original_Paym"& _ 
                "entID) AND (`GuestID` = :Original_GuestID) AND (`T_ID` = :Original_T_ID) AND ((:"& _ 
                "IsNull_ReservationID = 1 AND `ReservationID` IS NULL) OR (`ReservationID` = :Ori"& _ 
                "ginal_ReservationID)) AND ((:IsNull_AmountPaid = 1 AND `AmountPaid` IS NULL) OR "& _ 
                "(`AmountPaid` = :Original_AmountPaid)) AND ((:IsNull_Change = 1 AND `Change` IS "& _ 
                "NULL) OR (`Change` = :Original_Change)) AND ((:IsNull_TotalChange = 1 AND `Total"& _ 
                "Change` IS NULL) OR (`TotalChange` = :Original_TotalChange)) AND ((:IsNull_DateP"& _ 
                "ayed = 1 AND `DatePayed` IS NULL) OR (`DatePayed` = :Original_DatePayed)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "GuestID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "T_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "ReservationID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "ReservationID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "AmountPaid"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "AmountPaid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Change"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Change"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "TotalChange"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "TotalChange"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "DatePayed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "DatePayed"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_PaymentID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "PaymentID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_GuestID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_T_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_ReservationID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "ReservationID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_ReservationID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "ReservationID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_AmountPaid"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "AmountPaid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_AmountPaid"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "AmountPaid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Change"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Change"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Change"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Change"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_TotalChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "TotalChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_TotalChange"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "TotalChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_DatePayed"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "DatePayed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_DatePayed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "DatePayed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.MySql.MySqlConnection()
            Me._connection.ConnectionString = Global.JRM__JP_UniversalWindows_.My.MySettings.Default.jrmConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.MySql.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.MySql.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PaymentID, GuestID, T_ID, ReservationID, AmountPaid, `Change`, TotalChange"& _ 
                ", DatePayed FROM jrm.tblpayment"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTransaction.tblpaymentDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTransaction.tblpaymentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTransaction.tblpaymentDataTable = New DataSetTransaction.tblpaymentDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTransaction.tblpaymentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTransaction) As Integer
            Return Me.Adapter.Update(dataSet, "tblpayment")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PaymentID As Integer, ByVal Original_GuestID As Integer, ByVal Original_T_ID As Integer, ByVal Original_ReservationID As Global.System.Nullable(Of Integer), ByVal Original_AmountPaid As Global.System.Nullable(Of Double), ByVal Original_Change As Global.System.Nullable(Of Double), ByVal Original_TotalChange As Global.System.Nullable(Of Double), ByVal Original_DatePayed As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PaymentID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_GuestID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_T_ID,Integer)
            If (Original_ReservationID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ReservationID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_AmountPaid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_AmountPaid.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Change.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Change.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalChange.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_TotalChange.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_DatePayed.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_DatePayed.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal GuestID As Integer, ByVal T_ID As Integer, ByVal ReservationID As Global.System.Nullable(Of Integer), ByVal AmountPaid As Global.System.Nullable(Of Double), ByVal Change As Global.System.Nullable(Of Double), ByVal TotalChange As Global.System.Nullable(Of Double), ByVal DatePayed As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GuestID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(T_ID,Integer)
            If (ReservationID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ReservationID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (AmountPaid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AmountPaid.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Change.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Change.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TotalChange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TotalChange.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DatePayed.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DatePayed.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal GuestID As Integer, ByVal T_ID As Integer, ByVal ReservationID As Global.System.Nullable(Of Integer), ByVal AmountPaid As Global.System.Nullable(Of Double), ByVal Change As Global.System.Nullable(Of Double), ByVal TotalChange As Global.System.Nullable(Of Double), ByVal DatePayed As Global.System.Nullable(Of Date), ByVal Original_PaymentID As Integer, ByVal Original_GuestID As Integer, ByVal Original_T_ID As Integer, ByVal Original_ReservationID As Global.System.Nullable(Of Integer), ByVal Original_AmountPaid As Global.System.Nullable(Of Double), ByVal Original_Change As Global.System.Nullable(Of Double), ByVal Original_TotalChange As Global.System.Nullable(Of Double), ByVal Original_DatePayed As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GuestID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(T_ID,Integer)
            If (ReservationID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ReservationID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (AmountPaid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AmountPaid.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Change.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Change.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TotalChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TotalChange.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DatePayed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DatePayed.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PaymentID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_GuestID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_T_ID,Integer)
            If (Original_ReservationID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ReservationID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_AmountPaid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_AmountPaid.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_Change.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Change.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_TotalChange.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_DatePayed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_DatePayed.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ReservationID As Global.System.Nullable(Of Integer), ByVal AmountPaid As Global.System.Nullable(Of Double), ByVal Change As Global.System.Nullable(Of Double), ByVal TotalChange As Global.System.Nullable(Of Double), ByVal DatePayed As Global.System.Nullable(Of Date), ByVal Original_PaymentID As Integer, ByVal Original_GuestID As Integer, ByVal Original_T_ID As Integer, ByVal Original_ReservationID As Global.System.Nullable(Of Integer), ByVal Original_AmountPaid As Global.System.Nullable(Of Double), ByVal Original_Change As Global.System.Nullable(Of Double), ByVal Original_TotalChange As Global.System.Nullable(Of Double), ByVal Original_DatePayed As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_GuestID, Original_T_ID, ReservationID, AmountPaid, Change, TotalChange, DatePayed, Original_PaymentID, Original_GuestID, Original_T_ID, Original_ReservationID, Original_AmountPaid, Original_Change, Original_TotalChange, Original_DatePayed)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class table_transactiondetailsvenueTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.MySql.MySqlDataAdapter
        
        Private _connection As Global.Devart.Data.MySql.MySqlConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.MySql.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.MySql.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.MySql.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.MySql.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.MySql.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.MySql.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "table_transactiondetailsvenue"
            tableMapping.ColumnMappings.Add("TDV_id", "TDV_id")
            tableMapping.ColumnMappings.Add("T_id", "T_id")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("Item_Price", "Item_Price")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Subtotal", "Subtotal")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Type", "Type")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `jrm`.`table_transactiondetailsvenue` WHERE ((`TDV_id` = :Original_TD"& _ 
                "V_id) AND ((:IsNull_T_id = 1 AND `T_id` IS NULL) OR (`T_id` = :Original_T_id)) A"& _ 
                "ND ((:IsNull_Item_Name = 1 AND `Item_Name` IS NULL) OR (`Item_Name` = :Original_"& _ 
                "Item_Name)) AND ((:IsNull_Item_Price = 1 AND `Item_Price` IS NULL) OR (`Item_Pri"& _ 
                "ce` = :Original_Item_Price)) AND ((:IsNull_Quantity = 1 AND `Quantity` IS NULL) "& _ 
                "OR (`Quantity` = :Original_Quantity)) AND ((:IsNull_Subtotal = 1 AND `Subtotal` "& _ 
                "IS NULL) OR (`Subtotal` = :Original_Subtotal)) AND ((:IsNull_Item_ID = 1 AND `It"& _ 
                "em_ID` IS NULL) OR (`Item_ID` = :Original_Item_ID)) AND ((:IsNull_Type = 1 AND `"& _ 
                "Type` IS NULL) OR (`Type` = :Original_Type)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.MySql.MySqlParameter = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_TDV_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "TDV_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Name"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Price"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Quantity"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Subtotal"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Type"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `jrm`.`table_transactiondetailsvenue` (`T_id`, `Item_Name`, `Item_Pri"& _ 
                "ce`, `Quantity`, `Subtotal`, `Item_ID`, `Type`) VALUES (:T_id, :Item_Name, :Item"& _ 
                "_Price, :Quantity, :Subtotal, :Item_ID, :Type)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `jrm`.`table_transactiondetailsvenue` SET `T_id` = :T_id, `Item_Name` = :I"& _ 
                "tem_Name, `Item_Price` = :Item_Price, `Quantity` = :Quantity, `Subtotal` = :Subt"& _ 
                "otal, `Item_ID` = :Item_ID, `Type` = :Type WHERE ((`TDV_id` = :Original_TDV_id) "& _ 
                "AND ((:IsNull_T_id = 1 AND `T_id` IS NULL) OR (`T_id` = :Original_T_id)) AND ((:"& _ 
                "IsNull_Item_Name = 1 AND `Item_Name` IS NULL) OR (`Item_Name` = :Original_Item_N"& _ 
                "ame)) AND ((:IsNull_Item_Price = 1 AND `Item_Price` IS NULL) OR (`Item_Price` = "& _ 
                ":Original_Item_Price)) AND ((:IsNull_Quantity = 1 AND `Quantity` IS NULL) OR (`Q"& _ 
                "uantity` = :Original_Quantity)) AND ((:IsNull_Subtotal = 1 AND `Subtotal` IS NUL"& _ 
                "L) OR (`Subtotal` = :Original_Subtotal)) AND ((:IsNull_Item_ID = 1 AND `Item_ID`"& _ 
                " IS NULL) OR (`Item_ID` = :Original_Item_ID)) AND ((:IsNull_Type = 1 AND `Type` "& _ 
                "IS NULL) OR (`Type` = :Original_Type)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_TDV_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "TDV_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Name"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Price"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Quantity"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Subtotal"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Type"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.MySql.MySqlConnection()
            Me._connection.ConnectionString = Global.JRM__JP_UniversalWindows_.My.MySettings.Default.jrmConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.MySql.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.MySql.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TDV_id, T_id, Item_Name, Item_Price, Quantity, Subtotal, Item_ID, Type FRO"& _ 
                "M jrm.table_transactiondetailsvenue"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTransaction.table_transactiondetailsvenueDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTransaction.table_transactiondetailsvenueDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTransaction.table_transactiondetailsvenueDataTable = New DataSetTransaction.table_transactiondetailsvenueDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTransaction.table_transactiondetailsvenueDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTransaction) As Integer
            Return Me.Adapter.Update(dataSet, "table_transactiondetailsvenue")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TDV_id As Integer, ByVal Original_T_id As Global.System.Nullable(Of Integer), ByVal Original_Item_Name As String, ByVal Original_Item_Price As Global.System.Nullable(Of Double), ByVal Original_Quantity As Global.System.Nullable(Of Double), ByVal Original_Subtotal As Global.System.Nullable(Of Double), ByVal Original_Item_ID As Global.System.Nullable(Of Integer), ByVal Original_Type As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TDV_id,Integer)
            If (Original_T_id.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_T_id.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Item_Name,String)
            End If
            If (Original_Item_Price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Item_Price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Quantity.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Quantity.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Subtotal.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Subtotal.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Item_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal T_id As Global.System.Nullable(Of Integer), ByVal Item_Name As String, ByVal Item_Price As Global.System.Nullable(Of Double), ByVal Quantity As Global.System.Nullable(Of Double), ByVal Subtotal As Global.System.Nullable(Of Double), ByVal Item_ID As Global.System.Nullable(Of Integer), ByVal Type As String) As Integer
            If (T_id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(T_id.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Item_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Item_Name,String)
            End If
            If (Item_Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Item_Price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Quantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Quantity.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Subtotal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Subtotal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Item_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Item_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal T_id As Global.System.Nullable(Of Integer), ByVal Item_Name As String, ByVal Item_Price As Global.System.Nullable(Of Double), ByVal Quantity As Global.System.Nullable(Of Double), ByVal Subtotal As Global.System.Nullable(Of Double), ByVal Item_ID As Global.System.Nullable(Of Integer), ByVal Type As String, ByVal Original_TDV_id As Integer, ByVal Original_T_id As Global.System.Nullable(Of Integer), ByVal Original_Item_Name As String, ByVal Original_Item_Price As Global.System.Nullable(Of Double), ByVal Original_Quantity As Global.System.Nullable(Of Double), ByVal Original_Subtotal As Global.System.Nullable(Of Double), ByVal Original_Item_ID As Global.System.Nullable(Of Integer), ByVal Original_Type As String) As Integer
            If (T_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(T_id.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Item_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Item_Name,String)
            End If
            If (Item_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Item_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Quantity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Quantity.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Subtotal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Subtotal.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Item_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Item_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TDV_id,Integer)
            If (Original_T_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_T_id.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Item_Name,String)
            End If
            If (Original_Item_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Item_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_Quantity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Quantity.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_Subtotal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Subtotal.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Item_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class table_transactiondetailsitemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.MySql.MySqlDataAdapter
        
        Private _connection As Global.Devart.Data.MySql.MySqlConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.MySql.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.MySql.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.MySql.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.MySql.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.MySql.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.MySql.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "table_transactiondetailsitem"
            tableMapping.ColumnMappings.Add("TDI_id", "TDI_id")
            tableMapping.ColumnMappings.Add("T_id", "T_id")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("Item_Price", "Item_Price")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Subtotal", "Subtotal")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Type", "Type")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `jrm`.`table_transactiondetailsitem` WHERE ((`TDI_id` = :Original_TDI"& _ 
                "_id) AND ((:IsNull_T_id = 1 AND `T_id` IS NULL) OR (`T_id` = :Original_T_id)) AN"& _ 
                "D ((:IsNull_Item_Name = 1 AND `Item_Name` IS NULL) OR (`Item_Name` = :Original_I"& _ 
                "tem_Name)) AND ((:IsNull_Item_Price = 1 AND `Item_Price` IS NULL) OR (`Item_Pric"& _ 
                "e` = :Original_Item_Price)) AND ((:IsNull_Quantity = 1 AND `Quantity` IS NULL) O"& _ 
                "R (`Quantity` = :Original_Quantity)) AND ((:IsNull_Subtotal = 1 AND `Subtotal` I"& _ 
                "S NULL) OR (`Subtotal` = :Original_Subtotal)) AND ((:IsNull_Item_ID = 1 AND `Ite"& _ 
                "m_ID` IS NULL) OR (`Item_ID` = :Original_Item_ID)) AND ((:IsNull_Type = 1 AND `T"& _ 
                "ype` IS NULL) OR (`Type` = :Original_Type)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.MySql.MySqlParameter = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_TDI_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "TDI_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Name"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Price"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Quantity"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Subtotal"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Type"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `jrm`.`table_transactiondetailsitem` (`T_id`, `Item_Name`, `Item_Pric"& _ 
                "e`, `Quantity`, `Subtotal`, `Item_ID`, `Type`) VALUES (:T_id, :Item_Name, :Item_"& _ 
                "Price, :Quantity, :Subtotal, :Item_ID, :Type)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `jrm`.`table_transactiondetailsitem` SET `T_id` = :T_id, `Item_Name` = :It"& _ 
                "em_Name, `Item_Price` = :Item_Price, `Quantity` = :Quantity, `Subtotal` = :Subto"& _ 
                "tal, `Item_ID` = :Item_ID, `Type` = :Type WHERE ((`TDI_id` = :Original_TDI_id) A"& _ 
                "ND ((:IsNull_T_id = 1 AND `T_id` IS NULL) OR (`T_id` = :Original_T_id)) AND ((:I"& _ 
                "sNull_Item_Name = 1 AND `Item_Name` IS NULL) OR (`Item_Name` = :Original_Item_Na"& _ 
                "me)) AND ((:IsNull_Item_Price = 1 AND `Item_Price` IS NULL) OR (`Item_Price` = :"& _ 
                "Original_Item_Price)) AND ((:IsNull_Quantity = 1 AND `Quantity` IS NULL) OR (`Qu"& _ 
                "antity` = :Original_Quantity)) AND ((:IsNull_Subtotal = 1 AND `Subtotal` IS NULL"& _ 
                ") OR (`Subtotal` = :Original_Subtotal)) AND ((:IsNull_Item_ID = 1 AND `Item_ID` "& _ 
                "IS NULL) OR (`Item_ID` = :Original_Item_ID)) AND ((:IsNull_Type = 1 AND `Type` I"& _ 
                "S NULL) OR (`Type` = :Original_Type)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_TDI_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "TDI_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Name"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Price"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Quantity"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Subtotal"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Type"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.MySql.MySqlConnection()
            Me._connection.ConnectionString = Global.JRM__JP_UniversalWindows_.My.MySettings.Default.jrmConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.MySql.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.MySql.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TDI_id, T_id, Item_Name, Item_Price, Quantity, Subtotal, Item_ID, Type FRO"& _ 
                "M jrm.table_transactiondetailsitem"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTransaction.table_transactiondetailsitemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTransaction.table_transactiondetailsitemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTransaction.table_transactiondetailsitemDataTable = New DataSetTransaction.table_transactiondetailsitemDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTransaction.table_transactiondetailsitemDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTransaction) As Integer
            Return Me.Adapter.Update(dataSet, "table_transactiondetailsitem")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TDI_id As Integer, ByVal Original_T_id As Global.System.Nullable(Of Integer), ByVal Original_Item_Name As String, ByVal Original_Item_Price As Global.System.Nullable(Of Double), ByVal Original_Quantity As Global.System.Nullable(Of Double), ByVal Original_Subtotal As Global.System.Nullable(Of Double), ByVal Original_Item_ID As Global.System.Nullable(Of Integer), ByVal Original_Type As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TDI_id,Integer)
            If (Original_T_id.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_T_id.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Item_Name,String)
            End If
            If (Original_Item_Price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Item_Price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Quantity.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Quantity.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Subtotal.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Subtotal.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Item_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal T_id As Global.System.Nullable(Of Integer), ByVal Item_Name As String, ByVal Item_Price As Global.System.Nullable(Of Double), ByVal Quantity As Global.System.Nullable(Of Double), ByVal Subtotal As Global.System.Nullable(Of Double), ByVal Item_ID As Global.System.Nullable(Of Integer), ByVal Type As String) As Integer
            If (T_id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(T_id.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Item_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Item_Name,String)
            End If
            If (Item_Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Item_Price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Quantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Quantity.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Subtotal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Subtotal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Item_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Item_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal T_id As Global.System.Nullable(Of Integer), ByVal Item_Name As String, ByVal Item_Price As Global.System.Nullable(Of Double), ByVal Quantity As Global.System.Nullable(Of Double), ByVal Subtotal As Global.System.Nullable(Of Double), ByVal Item_ID As Global.System.Nullable(Of Integer), ByVal Type As String, ByVal Original_TDI_id As Integer, ByVal Original_T_id As Global.System.Nullable(Of Integer), ByVal Original_Item_Name As String, ByVal Original_Item_Price As Global.System.Nullable(Of Double), ByVal Original_Quantity As Global.System.Nullable(Of Double), ByVal Original_Subtotal As Global.System.Nullable(Of Double), ByVal Original_Item_ID As Global.System.Nullable(Of Integer), ByVal Original_Type As String) As Integer
            If (T_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(T_id.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Item_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Item_Name,String)
            End If
            If (Item_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Item_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Quantity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Quantity.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Subtotal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Subtotal.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Item_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Item_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TDI_id,Integer)
            If (Original_T_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_T_id.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Item_Name,String)
            End If
            If (Original_Item_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Item_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_Quantity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Quantity.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_Subtotal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Subtotal.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Item_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class table_transactiondetailsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.MySql.MySqlDataAdapter
        
        Private _connection As Global.Devart.Data.MySql.MySqlConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.MySql.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.MySql.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.MySql.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.MySql.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.MySql.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.MySql.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "table_transactiondetails"
            tableMapping.ColumnMappings.Add("TD_id", "TD_id")
            tableMapping.ColumnMappings.Add("T_id", "T_id")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("Item_Price", "Item_Price")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Subtotal", "Subtotal")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Type", "Type")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `jrm`.`table_transactiondetails` WHERE ((`TD_id` = :Original_TD_id) A"& _ 
                "ND ((:IsNull_T_id = 1 AND `T_id` IS NULL) OR (`T_id` = :Original_T_id)) AND ((:I"& _ 
                "sNull_Item_Name = 1 AND `Item_Name` IS NULL) OR (`Item_Name` = :Original_Item_Na"& _ 
                "me)) AND ((:IsNull_Item_Price = 1 AND `Item_Price` IS NULL) OR (`Item_Price` = :"& _ 
                "Original_Item_Price)) AND ((:IsNull_Quantity = 1 AND `Quantity` IS NULL) OR (`Qu"& _ 
                "antity` = :Original_Quantity)) AND ((:IsNull_Subtotal = 1 AND `Subtotal` IS NULL"& _ 
                ") OR (`Subtotal` = :Original_Subtotal)) AND ((:IsNull_Item_ID = 1 AND `Item_ID` "& _ 
                "IS NULL) OR (`Item_ID` = :Original_Item_ID)) AND ((:IsNull_Type = 1 AND `Type` I"& _ 
                "S NULL) OR (`Type` = :Original_Type)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.MySql.MySqlParameter = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_TD_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "TD_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Name"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Price"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Quantity"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Subtotal"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Type"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `jrm`.`table_transactiondetails` (`T_id`, `Item_Name`, `Item_Price`, "& _ 
                "`Quantity`, `Subtotal`, `Item_ID`, `Type`) VALUES (:T_id, :Item_Name, :Item_Pric"& _ 
                "e, :Quantity, :Subtotal, :Item_ID, :Type)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `jrm`.`table_transactiondetails` SET `T_id` = :T_id, `Item_Name` = :Item_N"& _ 
                "ame, `Item_Price` = :Item_Price, `Quantity` = :Quantity, `Subtotal` = :Subtotal,"& _ 
                " `Item_ID` = :Item_ID, `Type` = :Type WHERE ((`TD_id` = :Original_TD_id) AND ((:"& _ 
                "IsNull_T_id = 1 AND `T_id` IS NULL) OR (`T_id` = :Original_T_id)) AND ((:IsNull_"& _ 
                "Item_Name = 1 AND `Item_Name` IS NULL) OR (`Item_Name` = :Original_Item_Name)) A"& _ 
                "ND ((:IsNull_Item_Price = 1 AND `Item_Price` IS NULL) OR (`Item_Price` = :Origin"& _ 
                "al_Item_Price)) AND ((:IsNull_Quantity = 1 AND `Quantity` IS NULL) OR (`Quantity"& _ 
                "` = :Original_Quantity)) AND ((:IsNull_Subtotal = 1 AND `Subtotal` IS NULL) OR ("& _ 
                "`Subtotal` = :Original_Subtotal)) AND ((:IsNull_Item_ID = 1 AND `Item_ID` IS NUL"& _ 
                "L) OR (`Item_ID` = :Original_Item_ID)) AND ((:IsNull_Type = 1 AND `Type` IS NULL"& _ 
                ") OR (`Type` = :Original_Type)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_TD_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "TD_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_T_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "T_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Name"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Item_Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_Price"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_Price"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Item_Price"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Quantity"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Quantity"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Quantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Subtotal"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Subtotal"
            param.DbType = Global.System.Data.DbType.[Double]
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Subtotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Item_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Item_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Type"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.MySql.MySqlConnection()
            Me._connection.ConnectionString = Global.JRM__JP_UniversalWindows_.My.MySettings.Default.jrmConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.MySql.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.MySql.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TD_id, T_id, Item_Name, Item_Price, Quantity, Subtotal, Item_ID, Type FROM"& _ 
                " jrm.table_transactiondetails"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTransaction.table_transactiondetailsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTransaction.table_transactiondetailsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTransaction.table_transactiondetailsDataTable = New DataSetTransaction.table_transactiondetailsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTransaction.table_transactiondetailsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTransaction) As Integer
            Return Me.Adapter.Update(dataSet, "table_transactiondetails")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TD_id As Integer, ByVal Original_T_id As Global.System.Nullable(Of Integer), ByVal Original_Item_Name As String, ByVal Original_Item_Price As Global.System.Nullable(Of Double), ByVal Original_Quantity As Global.System.Nullable(Of Double), ByVal Original_Subtotal As Global.System.Nullable(Of Double), ByVal Original_Item_ID As Global.System.Nullable(Of Integer), ByVal Original_Type As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TD_id,Integer)
            If (Original_T_id.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_T_id.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Item_Name,String)
            End If
            If (Original_Item_Price.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Item_Price.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Quantity.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Quantity.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Subtotal.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Subtotal.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Item_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal T_id As Global.System.Nullable(Of Integer), ByVal Item_Name As String, ByVal Item_Price As Global.System.Nullable(Of Double), ByVal Quantity As Global.System.Nullable(Of Double), ByVal Subtotal As Global.System.Nullable(Of Double), ByVal Item_ID As Global.System.Nullable(Of Integer), ByVal Type As String) As Integer
            If (T_id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(T_id.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Item_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Item_Name,String)
            End If
            If (Item_Price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Item_Price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Quantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Quantity.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Subtotal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Subtotal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Item_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Item_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal T_id As Global.System.Nullable(Of Integer), ByVal Item_Name As String, ByVal Item_Price As Global.System.Nullable(Of Double), ByVal Quantity As Global.System.Nullable(Of Double), ByVal Subtotal As Global.System.Nullable(Of Double), ByVal Item_ID As Global.System.Nullable(Of Integer), ByVal Type As String, ByVal Original_TD_id As Integer, ByVal Original_T_id As Global.System.Nullable(Of Integer), ByVal Original_Item_Name As String, ByVal Original_Item_Price As Global.System.Nullable(Of Double), ByVal Original_Quantity As Global.System.Nullable(Of Double), ByVal Original_Subtotal As Global.System.Nullable(Of Double), ByVal Original_Item_ID As Global.System.Nullable(Of Integer), ByVal Original_Type As String) As Integer
            If (T_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(T_id.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Item_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Item_Name,String)
            End If
            If (Item_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Item_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Quantity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Quantity.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Subtotal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Subtotal.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Item_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Item_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TD_id,Integer)
            If (Original_T_id.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_T_id.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Item_Name,String)
            End If
            If (Original_Item_Price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Item_Price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_Quantity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Quantity.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_Subtotal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Subtotal.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_Item_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Item_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblguestdetailsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.MySql.MySqlDataAdapter
        
        Private _connection As Global.Devart.Data.MySql.MySqlConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.MySql.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.MySql.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.MySql.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.MySql.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.MySql.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.MySql.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblguestdetails"
            tableMapping.ColumnMappings.Add("GDetailsID", "GDetailsID")
            tableMapping.ColumnMappings.Add("GuestID", "GuestID")
            tableMapping.ColumnMappings.Add("Fname", "Fname")
            tableMapping.ColumnMappings.Add("Mname", "Mname")
            tableMapping.ColumnMappings.Add("Lname", "Lname")
            tableMapping.ColumnMappings.Add("Gender", "Gender")
            tableMapping.ColumnMappings.Add("Type", "Type")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `jrm`.`tblguestdetails` WHERE ((`GDetailsID` = :Original_GDetailsID) "& _ 
                "AND (`GuestID` = :Original_GuestID) AND ((:IsNull_Fname = 1 AND `Fname` IS NULL)"& _ 
                " OR (`Fname` = :Original_Fname)) AND ((:IsNull_Mname = 1 AND `Mname` IS NULL) OR"& _ 
                " (`Mname` = :Original_Mname)) AND ((:IsNull_Lname = 1 AND `Lname` IS NULL) OR (`"& _ 
                "Lname` = :Original_Lname)) AND ((:IsNull_Gender = 1 AND `Gender` IS NULL) OR (`G"& _ 
                "ender` = :Original_Gender)) AND ((:IsNull_Type = 1 AND `Type` IS NULL) OR (`Type"& _ 
                "` = :Original_Type)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.MySql.MySqlParameter = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_GDetailsID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GDetailsID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_GuestID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Fname"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Fname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Fname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Mname"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Mname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Mname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Lname"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Lname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Lname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Lname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Gender"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Gender"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Gender"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Gender"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Type"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `jrm`.`tblguestdetails` (`GuestID`, `Fname`, `Mname`, `Lname`, `Gende"& _ 
                "r`, `Type`) VALUES (:GuestID, :Fname, :Mname, :Lname, :Gender, :Type)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "GuestID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Fname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Mname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Lname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Lname"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Gender"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Gender"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `jrm`.`tblguestdetails` SET `GuestID` = :GuestID, `Fname` = :Fname, `Mname"& _ 
                "` = :Mname, `Lname` = :Lname, `Gender` = :Gender, `Type` = :Type WHERE ((`GDetai"& _ 
                "lsID` = :Original_GDetailsID) AND (`GuestID` = :Original_GuestID) AND ((:IsNull_"& _ 
                "Fname = 1 AND `Fname` IS NULL) OR (`Fname` = :Original_Fname)) AND ((:IsNull_Mna"& _ 
                "me = 1 AND `Mname` IS NULL) OR (`Mname` = :Original_Mname)) AND ((:IsNull_Lname "& _ 
                "= 1 AND `Lname` IS NULL) OR (`Lname` = :Original_Lname)) AND ((:IsNull_Gender = "& _ 
                "1 AND `Gender` IS NULL) OR (`Gender` = :Original_Gender)) AND ((:IsNull_Type = 1"& _ 
                " AND `Type` IS NULL) OR (`Type` = :Original_Type)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "GuestID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Fname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Mname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Lname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Lname"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Gender"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Gender"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_GDetailsID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GDetailsID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_GuestID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Fname"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Fname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Fname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Fname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Mname"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Mname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Mname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Mname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Lname"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Lname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Lname"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Lname"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Gender"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Gender"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Gender"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Gender"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Type"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Type"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Type"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.MySql.MySqlConnection()
            Me._connection.ConnectionString = Global.JRM__JP_UniversalWindows_.My.MySettings.Default.jrmConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.MySql.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.MySql.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GDetailsID, GuestID, Fname, Mname, Lname, Gender, Type FROM jrm.tblguestde"& _ 
                "tails"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTransaction.tblguestdetailsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTransaction.tblguestdetailsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTransaction.tblguestdetailsDataTable = New DataSetTransaction.tblguestdetailsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTransaction.tblguestdetailsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTransaction) As Integer
            Return Me.Adapter.Update(dataSet, "tblguestdetails")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_GDetailsID As Integer, ByVal Original_GuestID As Integer, ByVal Original_Fname As String, ByVal Original_Mname As String, ByVal Original_Lname As String, ByVal Original_Gender As String, ByVal Original_Type As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GDetailsID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_GuestID,Integer)
            If (Original_Fname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Fname,String)
            End If
            If (Original_Mname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Mname,String)
            End If
            If (Original_Lname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Lname,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Gender,String)
            End If
            If (Original_Type Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal GuestID As Integer, ByVal Fname As String, ByVal Mname As String, ByVal Lname As String, ByVal Gender As String, ByVal Type As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GuestID,Integer)
            If (Fname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Fname,String)
            End If
            If (Mname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Mname,String)
            End If
            If (Lname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Lname,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Gender,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal GuestID As Integer, ByVal Fname As String, ByVal Mname As String, ByVal Lname As String, ByVal Gender As String, ByVal Type As String, ByVal Original_GDetailsID As Integer, ByVal Original_GuestID As Integer, ByVal Original_Fname As String, ByVal Original_Mname As String, ByVal Original_Lname As String, ByVal Original_Gender As String, ByVal Original_Type As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GuestID,Integer)
            If (Fname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Fname,String)
            End If
            If (Mname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Mname,String)
            End If
            If (Lname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Lname,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Gender,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_GDetailsID,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_GuestID,Integer)
            If (Original_Fname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Fname,String)
            End If
            If (Original_Mname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Mname,String)
            End If
            If (Original_Lname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Lname,String)
            End If
            If (Original_Gender Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Gender,String)
            End If
            If (Original_Type Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblguestsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.MySql.MySqlDataAdapter
        
        Private _connection As Global.Devart.Data.MySql.MySqlConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.MySql.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.MySql.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.MySql.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.MySql.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.MySql.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.MySql.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblguests"
            tableMapping.ColumnMappings.Add("GuestID", "GuestID")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("ContactNo", "ContactNo")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("GuestCreated", "GuestCreated")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `jrm`.`tblguests` WHERE ((`GuestID` = :Original_GuestID) AND ((:IsNul"& _ 
                "l_Name = 1 AND `Name` IS NULL) OR (`Name` = :Original_Name)) AND ((:IsNull_Email"& _ 
                " = 1 AND `Email` IS NULL) OR (`Email` = :Original_Email)) AND ((:IsNull_ContactN"& _ 
                "o = 1 AND `ContactNo` IS NULL) OR (`ContactNo` = :Original_ContactNo)) AND ((:Is"& _ 
                "Null_Address = 1 AND `Address` IS NULL) OR (`Address` = :Original_Address)) AND "& _ 
                "((:IsNull_GuestCreated = 1 AND `GuestCreated` IS NULL) OR (`GuestCreated` = :Ori"& _ 
                "ginal_GuestCreated)) AND ((:IsNull_Status = 1 AND `Status` IS NULL) OR (`Status`"& _ 
                " = :Original_Status)) AND ((:IsNull_Remarks = 1 AND `Remarks` IS NULL) OR (`Rema"& _ 
                "rks` = :Original_Remarks)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.MySql.MySqlParameter = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_GuestID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Name"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Email"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Email"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_ContactNo"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_ContactNo"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Address"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Address"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_GuestCreated"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestCreated"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_GuestCreated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "GuestCreated"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Status"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Status"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Remarks"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Remarks"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Remarks"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Remarks"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `jrm`.`tblguests` (`Name`, `Email`, `ContactNo`, `Address`, `GuestCre"& _ 
                "ated`, `Status`, `Remarks`) VALUES (:Name, :Email, :ContactNo, :Address, :GuestC"& _ 
                "reated, :Status, :Remarks)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Email"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "ContactNo"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Address"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "GuestCreated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "GuestCreated"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Status"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Remarks"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Remarks"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.MySql.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `jrm`.`tblguests` SET `Name` = :Name, `Email` = :Email, `ContactNo` = :Con"& _ 
                "tactNo, `Address` = :Address, `GuestCreated` = :GuestCreated, `Status` = :Status"& _ 
                ", `Remarks` = :Remarks WHERE ((`GuestID` = :Original_GuestID) AND ((:IsNull_Name"& _ 
                " = 1 AND `Name` IS NULL) OR (`Name` = :Original_Name)) AND ((:IsNull_Email = 1 A"& _ 
                "ND `Email` IS NULL) OR (`Email` = :Original_Email)) AND ((:IsNull_ContactNo = 1 "& _ 
                "AND `ContactNo` IS NULL) OR (`ContactNo` = :Original_ContactNo)) AND ((:IsNull_A"& _ 
                "ddress = 1 AND `Address` IS NULL) OR (`Address` = :Original_Address)) AND ((:IsN"& _ 
                "ull_GuestCreated = 1 AND `GuestCreated` IS NULL) OR (`GuestCreated` = :Original_"& _ 
                "GuestCreated)) AND ((:IsNull_Status = 1 AND `Status` IS NULL) OR (`Status` = :Or"& _ 
                "iginal_Status)) AND ((:IsNull_Remarks = 1 AND `Remarks` IS NULL) OR (`Remarks` ="& _ 
                " :Original_Remarks)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Email"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "ContactNo"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Address"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "GuestCreated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "GuestCreated"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Status"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Remarks"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Remarks"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_GuestID"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Name"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Name"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Email"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Email"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_ContactNo"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_ContactNo"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ContactNo"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Address"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Address"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Address"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_GuestCreated"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "GuestCreated"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_GuestCreated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.DateTime
            param.IsNullable = true
            param.SourceColumn = "GuestCreated"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Status"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Status"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "IsNull_Remarks"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.Int
            param.IsNullable = true
            param.SourceColumn = "Remarks"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.MySql.MySqlParameter()
            param.ParameterName = "Original_Remarks"
            param.MySqlType = Global.Devart.Data.MySql.MySqlType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Remarks"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.MySql.MySqlConnection()
            Me._connection.ConnectionString = Global.JRM__JP_UniversalWindows_.My.MySettings.Default.jrmConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.MySql.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.MySql.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GuestID, Name, Email, ContactNo, Address, GuestCreated, Status, Remarks FR"& _ 
                "OM jrm.tblguests"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTransaction.tblguestsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTransaction.tblguestsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTransaction.tblguestsDataTable = New DataSetTransaction.tblguestsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTransaction.tblguestsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTransaction) As Integer
            Return Me.Adapter.Update(dataSet, "tblguests")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_GuestID As Integer, ByVal Original_Name As String, ByVal Original_Email As String, ByVal Original_ContactNo As String, ByVal Original_Address As String, ByVal Original_GuestCreated As Global.System.Nullable(Of Date), ByVal Original_Status As String, ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GuestID,Integer)
            If (Original_Name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Name,String)
            End If
            If (Original_Email Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Email,String)
            End If
            If (Original_ContactNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ContactNo,String)
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Address,String)
            End If
            If (Original_GuestCreated.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_GuestCreated.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Status,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Name As String, ByVal Email As String, ByVal ContactNo As String, ByVal Address As String, ByVal GuestCreated As Global.System.Nullable(Of Date), ByVal Status As String, ByVal Remarks As String) As Integer
            If (Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Name,String)
            End If
            If (Email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Email,String)
            End If
            If (ContactNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ContactNo,String)
            End If
            If (Address Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address,String)
            End If
            If (GuestCreated.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(GuestCreated.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Status,String)
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Name As String, ByVal Email As String, ByVal ContactNo As String, ByVal Address As String, ByVal GuestCreated As Global.System.Nullable(Of Date), ByVal Status As String, ByVal Remarks As String, ByVal Original_GuestID As Integer, ByVal Original_Name As String, ByVal Original_Email As String, ByVal Original_ContactNo As String, ByVal Original_Address As String, ByVal Original_GuestCreated As Global.System.Nullable(Of Date), ByVal Original_Status As String, ByVal Original_Remarks As String) As Integer
            If (Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Name,String)
            End If
            If (Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Email,String)
            End If
            If (ContactNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ContactNo,String)
            End If
            If (Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address,String)
            End If
            If (GuestCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(GuestCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Status,String)
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_GuestID,Integer)
            If (Original_Name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Name,String)
            End If
            If (Original_Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Email,String)
            End If
            If (Original_ContactNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ContactNo,String)
            End If
            If (Original_Address Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Address,String)
            End If
            If (Original_GuestCreated.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_GuestCreated.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Status,String)
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Remarks,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _table_transactionsTableAdapter As table_transactionsTableAdapter
        
        Private _tblusersTableAdapter As tblusersTableAdapter
        
        Private _tblpaymentTableAdapter As tblpaymentTableAdapter
        
        Private _table_transactiondetailsvenueTableAdapter As table_transactiondetailsvenueTableAdapter
        
        Private _table_transactiondetailsitemTableAdapter As table_transactiondetailsitemTableAdapter
        
        Private _table_transactiondetailsTableAdapter As table_transactiondetailsTableAdapter
        
        Private _tblguestdetailsTableAdapter As tblguestdetailsTableAdapter
        
        Private _tblguestsTableAdapter As tblguestsTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property table_transactionsTableAdapter() As table_transactionsTableAdapter
            Get
                Return Me._table_transactionsTableAdapter
            End Get
            Set
                Me._table_transactionsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblusersTableAdapter() As tblusersTableAdapter
            Get
                Return Me._tblusersTableAdapter
            End Get
            Set
                Me._tblusersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblpaymentTableAdapter() As tblpaymentTableAdapter
            Get
                Return Me._tblpaymentTableAdapter
            End Get
            Set
                Me._tblpaymentTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property table_transactiondetailsvenueTableAdapter() As table_transactiondetailsvenueTableAdapter
            Get
                Return Me._table_transactiondetailsvenueTableAdapter
            End Get
            Set
                Me._table_transactiondetailsvenueTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property table_transactiondetailsitemTableAdapter() As table_transactiondetailsitemTableAdapter
            Get
                Return Me._table_transactiondetailsitemTableAdapter
            End Get
            Set
                Me._table_transactiondetailsitemTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property table_transactiondetailsTableAdapter() As table_transactiondetailsTableAdapter
            Get
                Return Me._table_transactiondetailsTableAdapter
            End Get
            Set
                Me._table_transactiondetailsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblguestdetailsTableAdapter() As tblguestdetailsTableAdapter
            Get
                Return Me._tblguestdetailsTableAdapter
            End Get
            Set
                Me._tblguestdetailsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblguestsTableAdapter() As tblguestsTableAdapter
            Get
                Return Me._tblguestsTableAdapter
            End Get
            Set
                Me._tblguestsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._table_transactionsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._table_transactionsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._table_transactionsTableAdapter.Connection
                End If
                If ((Not (Me._tblusersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblusersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblusersTableAdapter.Connection
                End If
                If ((Not (Me._tblpaymentTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblpaymentTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblpaymentTableAdapter.Connection
                End If
                If ((Not (Me._table_transactiondetailsvenueTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._table_transactiondetailsvenueTableAdapter.Connection) Is Nothing)) Then
                    Return Me._table_transactiondetailsvenueTableAdapter.Connection
                End If
                If ((Not (Me._table_transactiondetailsitemTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._table_transactiondetailsitemTableAdapter.Connection) Is Nothing)) Then
                    Return Me._table_transactiondetailsitemTableAdapter.Connection
                End If
                If ((Not (Me._table_transactiondetailsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._table_transactiondetailsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._table_transactiondetailsTableAdapter.Connection
                End If
                If ((Not (Me._tblguestdetailsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblguestdetailsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblguestdetailsTableAdapter.Connection
                End If
                If ((Not (Me._tblguestsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblguestsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblguestsTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._table_transactionsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblusersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblpaymentTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._table_transactiondetailsvenueTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._table_transactiondetailsitemTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._table_transactiondetailsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblguestdetailsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblguestsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSetTransaction, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._table_transactionsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.table_transactions.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._table_transactionsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblusersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblusers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblusersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblpaymentTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblpayment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblpaymentTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._table_transactiondetailsvenueTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.table_transactiondetailsvenue.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._table_transactiondetailsvenueTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._table_transactiondetailsitemTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.table_transactiondetailsitem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._table_transactiondetailsitemTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._table_transactiondetailsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.table_transactiondetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._table_transactiondetailsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblguestdetailsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblguestdetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblguestdetailsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblguestsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblguests.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblguestsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSetTransaction, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._table_transactionsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.table_transactions.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._table_transactionsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblusersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblusers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblusersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblpaymentTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblpayment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblpaymentTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._table_transactiondetailsvenueTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.table_transactiondetailsvenue.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._table_transactiondetailsvenueTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._table_transactiondetailsitemTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.table_transactiondetailsitem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._table_transactiondetailsitemTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._table_transactiondetailsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.table_transactiondetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._table_transactiondetailsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblguestdetailsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblguestdetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblguestdetailsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblguestsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblguests.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblguestsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSetTransaction, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblguestsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblguests.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblguestsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblguestdetailsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblguestdetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblguestdetailsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._table_transactiondetailsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.table_transactiondetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._table_transactiondetailsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._table_transactiondetailsitemTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.table_transactiondetailsitem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._table_transactiondetailsitemTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._table_transactiondetailsvenueTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.table_transactiondetailsvenue.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._table_transactiondetailsvenueTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblpaymentTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblpayment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblpaymentTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblusersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblusers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblusersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._table_transactionsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.table_transactions.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._table_transactionsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSetTransaction) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._table_transactionsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._table_transactionsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblusersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblusersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblpaymentTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblpaymentTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._table_transactiondetailsvenueTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._table_transactiondetailsvenueTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._table_transactiondetailsitemTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._table_transactiondetailsitemTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._table_transactiondetailsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._table_transactiondetailsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblguestdetailsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblguestdetailsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblguestsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblguestsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._table_transactionsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._table_transactionsTableAdapter, Me._table_transactionsTableAdapter.Connection)
                    Me._table_transactionsTableAdapter.Connection = CType(workConnection,Global.Devart.Data.MySql.MySqlConnection)
                    Me._table_transactionsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._table_transactionsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._table_transactionsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._table_transactionsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblusersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblusersTableAdapter, Me._tblusersTableAdapter.Connection)
                    Me._tblusersTableAdapter.Connection = CType(workConnection,Global.Devart.Data.MySql.MySqlConnection)
                    Me._tblusersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._tblusersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblusersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblusersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblpaymentTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblpaymentTableAdapter, Me._tblpaymentTableAdapter.Connection)
                    Me._tblpaymentTableAdapter.Connection = CType(workConnection,Global.Devart.Data.MySql.MySqlConnection)
                    Me._tblpaymentTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._tblpaymentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblpaymentTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblpaymentTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._table_transactiondetailsvenueTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._table_transactiondetailsvenueTableAdapter, Me._table_transactiondetailsvenueTableAdapter.Connection)
                    Me._table_transactiondetailsvenueTableAdapter.Connection = CType(workConnection,Global.Devart.Data.MySql.MySqlConnection)
                    Me._table_transactiondetailsvenueTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._table_transactiondetailsvenueTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._table_transactiondetailsvenueTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._table_transactiondetailsvenueTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._table_transactiondetailsitemTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._table_transactiondetailsitemTableAdapter, Me._table_transactiondetailsitemTableAdapter.Connection)
                    Me._table_transactiondetailsitemTableAdapter.Connection = CType(workConnection,Global.Devart.Data.MySql.MySqlConnection)
                    Me._table_transactiondetailsitemTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._table_transactiondetailsitemTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._table_transactiondetailsitemTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._table_transactiondetailsitemTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._table_transactiondetailsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._table_transactiondetailsTableAdapter, Me._table_transactiondetailsTableAdapter.Connection)
                    Me._table_transactiondetailsTableAdapter.Connection = CType(workConnection,Global.Devart.Data.MySql.MySqlConnection)
                    Me._table_transactiondetailsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._table_transactiondetailsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._table_transactiondetailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._table_transactiondetailsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblguestdetailsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblguestdetailsTableAdapter, Me._tblguestdetailsTableAdapter.Connection)
                    Me._tblguestdetailsTableAdapter.Connection = CType(workConnection,Global.Devart.Data.MySql.MySqlConnection)
                    Me._tblguestdetailsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._tblguestdetailsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblguestdetailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblguestdetailsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblguestsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblguestsTableAdapter, Me._tblguestsTableAdapter.Connection)
                    Me._tblguestsTableAdapter.Connection = CType(workConnection,Global.Devart.Data.MySql.MySqlConnection)
                    Me._tblguestsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._tblguestsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblguestsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblguestsTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._table_transactionsTableAdapter) Is Nothing) Then
                    Me._table_transactionsTableAdapter.Connection = CType(revertConnections(Me._table_transactionsTableAdapter),Global.Devart.Data.MySql.MySqlConnection)
                    Me._table_transactionsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblusersTableAdapter) Is Nothing) Then
                    Me._tblusersTableAdapter.Connection = CType(revertConnections(Me._tblusersTableAdapter),Global.Devart.Data.MySql.MySqlConnection)
                    Me._tblusersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblpaymentTableAdapter) Is Nothing) Then
                    Me._tblpaymentTableAdapter.Connection = CType(revertConnections(Me._tblpaymentTableAdapter),Global.Devart.Data.MySql.MySqlConnection)
                    Me._tblpaymentTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._table_transactiondetailsvenueTableAdapter) Is Nothing) Then
                    Me._table_transactiondetailsvenueTableAdapter.Connection = CType(revertConnections(Me._table_transactiondetailsvenueTableAdapter),Global.Devart.Data.MySql.MySqlConnection)
                    Me._table_transactiondetailsvenueTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._table_transactiondetailsitemTableAdapter) Is Nothing) Then
                    Me._table_transactiondetailsitemTableAdapter.Connection = CType(revertConnections(Me._table_transactiondetailsitemTableAdapter),Global.Devart.Data.MySql.MySqlConnection)
                    Me._table_transactiondetailsitemTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._table_transactiondetailsTableAdapter) Is Nothing) Then
                    Me._table_transactiondetailsTableAdapter.Connection = CType(revertConnections(Me._table_transactiondetailsTableAdapter),Global.Devart.Data.MySql.MySqlConnection)
                    Me._table_transactiondetailsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblguestdetailsTableAdapter) Is Nothing) Then
                    Me._tblguestdetailsTableAdapter.Connection = CType(revertConnections(Me._tblguestdetailsTableAdapter),Global.Devart.Data.MySql.MySqlConnection)
                    Me._tblguestdetailsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblguestsTableAdapter) Is Nothing) Then
                    Me._tblguestsTableAdapter.Connection = CType(revertConnections(Me._tblguestsTableAdapter),Global.Devart.Data.MySql.MySqlConnection)
                    Me._tblguestsTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
